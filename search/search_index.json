{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Launching a corporate documentation management service using MediaWiki Dmitry Kirsanov | GitHub The project involves the deployment of a corporate documentation management service using the MediaWiki application. Initial Project Term of Reference The MediaWiki servers have to be running on Ubuntu 22.04 OS and must utilize PostgreSQL 14 for data storage, including scheduled db_dump backups for data integrity. Load balancing between the MediaWiki servers has to be managed by an Nginx proxy server to distribute incoming traffic efficiently. System monitoring needs to be performed using Zabbix , overseeing server performance metrics such as CPU, memory, disk usage, and database health to ensure system reliability and early issue detection. As this is a pilot implementation, only 40 users within the local network will access the MediaWiki service through its web interface over the HTTP protocol . Project Objectives Infrastructure Design Development of a deployment scheme for the corporate documentation service based on MediaWiki. The scheme must include all key components (servers, databases, load balancers, and auxiliary services) and describe their interactions. Infrastructure Deployment Installation and configuration of MediaWiki, PostgreSQL, and auxiliary services (Nginx, Zabbix, etc.). Failover Testing Conducting system failover testing: verifying system functionality after server shutdowns, recovery from backups, and data replication checks.","title":"1. Introduction"},{"location":"#launching-a-corporate-documentation-management-service-using-mediawiki","text":"Dmitry Kirsanov | GitHub The project involves the deployment of a corporate documentation management service using the MediaWiki application.","title":"Launching a corporate documentation management service using MediaWiki"},{"location":"#initial-project-term-of-reference","text":"The MediaWiki servers have to be running on Ubuntu 22.04 OS and must utilize PostgreSQL 14 for data storage, including scheduled db_dump backups for data integrity. Load balancing between the MediaWiki servers has to be managed by an Nginx proxy server to distribute incoming traffic efficiently. System monitoring needs to be performed using Zabbix , overseeing server performance metrics such as CPU, memory, disk usage, and database health to ensure system reliability and early issue detection. As this is a pilot implementation, only 40 users within the local network will access the MediaWiki service through its web interface over the HTTP protocol .","title":"Initial Project Term of Reference"},{"location":"#project-objectives","text":"","title":"Project Objectives"},{"location":"#infrastructure-design","text":"Development of a deployment scheme for the corporate documentation service based on MediaWiki. The scheme must include all key components (servers, databases, load balancers, and auxiliary services) and describe their interactions.","title":"Infrastructure Design"},{"location":"#infrastructure-deployment","text":"Installation and configuration of MediaWiki, PostgreSQL, and auxiliary services (Nginx, Zabbix, etc.).","title":"Infrastructure Deployment"},{"location":"#failover-testing","text":"Conducting system failover testing: verifying system functionality after server shutdowns, recovery from backups, and data replication checks.","title":"Failover Testing"},{"location":"2.%20app_deploy_schema_v4/","text":"Application deployment schema Components VM-0 vm-0-service-virtual-machine \u2014 Service VM for Administration and Deployment Stack: Alpine Linux v3.20, Docker, GitHub, Terraform, Ansible, Python. Show description The administrator uses Docker containers and a GitHub repository for the automated deployment, management, and execution of Python scripts on a service VM. The VM serves as an entry point for managing the entire system. VM-1 vm-1-monitoring-system + VHDD-1 vhdd-1-monitoring-system-db \u2014 Monitoring System (Zabbix + PostgreSQL) + External HDD drive. Stack: Ubuntu 22.04, Zabbix-Server, PostgreSQL. Show description The monitoring system is responsible for overseeing the state of all infrastructure components. The Zabbix server collects and analyzes data from the servers, while PostgreSQL stores the monitoring information. Data is written to a mounted hard disk (VHDD-1) vhdd-1-monitoring-system-db to prevent data loss in case of a system failure. VM-2 vm-2-nginx-proxy-server \u2014 Proxy Server. User Requests to MediaWiki Servers Stack: Ubuntu 22.04, Nginx, PostgreSQL. Show description The Nginx proxy server distributes the load between the MediaWiki servers ( VM-3 vm-3-mediawiki-server-1 and VM-4 vm-4-mediawiki-server-2 ) to ensure the smooth operation of the service. VM-3 vm-3-mediawiki-server-1 , VM-4 vm-4-mediawiki-server-2 \u2014 MediaWiki servers Stack: Ubuntu 22.04, MediaWiki, Zabbix-agent. Show description The MediaWiki servers handle user requests and read from and write data to the PostgreSQL database. VM-5 vm-5-haproxy-proxy-server \u2014 Proxy Server. MediaWiki Requests to PostgreSQL db Stack: Ubuntu 22.04, HAProxy, Zabbix-agent. Show description The HAProxy proxy server is responsible for distributing requests from the MediaWiki servers between the Primary PostgreSQL vm-6-primary-db and Standby PostgreSQLL vm-7-standby-db databases. VM-6 vm-6-primary-db + VSSD-1 vssd-1-primary-db \u2014 Primary PostgreSQL db + External SSD-drive Stack: Ubuntu 22.04, PostgreSQL, Zabbix-agent. Show description The Primary PostgreSQL vm-6-primary-db handles read/write requests coming through HAProxy proxy server vm-5-haproxy-proxy-server . The data is stored on a dedicated VSSD-1 vssd-1-primary-db to enhance the speed of data processing. VM-7 vm-7-standby-db + VHDD-2 vhdd-2-standby-db + VHDD-3 vhdd-3-dump-db \u2014 Standby PostgreSQL db. Replication from the Primary db and pg_dump backup + 2 External HDD drives (replication data storage and backups) Stack: Ubuntu 22.04, PostgreSQL, Zabbix-agent. Show description The Standby PostgreSQL db vm-7-standby-db performs asynchronous data replication from the Primary PostgreSQL db vm-6-primary-db to VHDD-2 vhdd-2-standby-db . This allows for a quick failover in case the Primary PostgreSQL db vm-6-primary-db fails. The pg_dump utility is used for backups on VHDD-3 vhdd-3-dump-db . This enables restoring the database to a specific point in time, which can be useful if the database has been compromised by malware that has already replicated to both databases. Visualisation Download the .drawio-file Download the .drawio-file","title":"2. App deployment schema"},{"location":"2.%20app_deploy_schema_v4/#application-deployment-schema","text":"","title":"Application deployment schema"},{"location":"2.%20app_deploy_schema_v4/#components","text":"VM-0 vm-0-service-virtual-machine \u2014 Service VM for Administration and Deployment Stack: Alpine Linux v3.20, Docker, GitHub, Terraform, Ansible, Python. Show description The administrator uses Docker containers and a GitHub repository for the automated deployment, management, and execution of Python scripts on a service VM. The VM serves as an entry point for managing the entire system. VM-1 vm-1-monitoring-system + VHDD-1 vhdd-1-monitoring-system-db \u2014 Monitoring System (Zabbix + PostgreSQL) + External HDD drive. Stack: Ubuntu 22.04, Zabbix-Server, PostgreSQL. Show description The monitoring system is responsible for overseeing the state of all infrastructure components. The Zabbix server collects and analyzes data from the servers, while PostgreSQL stores the monitoring information. Data is written to a mounted hard disk (VHDD-1) vhdd-1-monitoring-system-db to prevent data loss in case of a system failure. VM-2 vm-2-nginx-proxy-server \u2014 Proxy Server. User Requests to MediaWiki Servers Stack: Ubuntu 22.04, Nginx, PostgreSQL. Show description The Nginx proxy server distributes the load between the MediaWiki servers ( VM-3 vm-3-mediawiki-server-1 and VM-4 vm-4-mediawiki-server-2 ) to ensure the smooth operation of the service. VM-3 vm-3-mediawiki-server-1 , VM-4 vm-4-mediawiki-server-2 \u2014 MediaWiki servers Stack: Ubuntu 22.04, MediaWiki, Zabbix-agent. Show description The MediaWiki servers handle user requests and read from and write data to the PostgreSQL database. VM-5 vm-5-haproxy-proxy-server \u2014 Proxy Server. MediaWiki Requests to PostgreSQL db Stack: Ubuntu 22.04, HAProxy, Zabbix-agent. Show description The HAProxy proxy server is responsible for distributing requests from the MediaWiki servers between the Primary PostgreSQL vm-6-primary-db and Standby PostgreSQLL vm-7-standby-db databases. VM-6 vm-6-primary-db + VSSD-1 vssd-1-primary-db \u2014 Primary PostgreSQL db + External SSD-drive Stack: Ubuntu 22.04, PostgreSQL, Zabbix-agent. Show description The Primary PostgreSQL vm-6-primary-db handles read/write requests coming through HAProxy proxy server vm-5-haproxy-proxy-server . The data is stored on a dedicated VSSD-1 vssd-1-primary-db to enhance the speed of data processing. VM-7 vm-7-standby-db + VHDD-2 vhdd-2-standby-db + VHDD-3 vhdd-3-dump-db \u2014 Standby PostgreSQL db. Replication from the Primary db and pg_dump backup + 2 External HDD drives (replication data storage and backups) Stack: Ubuntu 22.04, PostgreSQL, Zabbix-agent. Show description The Standby PostgreSQL db vm-7-standby-db performs asynchronous data replication from the Primary PostgreSQL db vm-6-primary-db to VHDD-2 vhdd-2-standby-db . This allows for a quick failover in case the Primary PostgreSQL db vm-6-primary-db fails. The pg_dump utility is used for backups on VHDD-3 vhdd-3-dump-db . This enables restoring the database to a specific point in time, which can be useful if the database has been compromised by malware that has already replicated to both databases.","title":"Components"},{"location":"2.%20app_deploy_schema_v4/#visualisation","text":"","title":"Visualisation"},{"location":"2.%20app_deploy_schema_v4/#download-the-drawio-file","text":"Download the .drawio-file","title":"Download the .drawio-file"},{"location":"3.1.%20service_vm_docker_setup/","text":"Service VM Docker Configuration Download and Install Docker-desktop Install VScode Docker extension Create Dockerfile ( GitHub ) Show Dockerfile # Using the Alpine Linux base image FROM alpine:latest # Updating packages and installing dependencies RUN apk update && apk add --no-cache \\ bash \\ bash-completion \\ curl \\ wget \\ git \\ unzip \\ python3 \\ py3-pip \\ gnupg \\ ca-certificates \\ sudo \\ openssh \\ sshpass \\ ansible # Generating SSH keys RUN ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N \"\" # Installing Terraform RUN wget https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip && \\ unzip terraform_1.5.7_linux_amd64.zip && \\ mv terraform /usr/local/bin/ && \\ rm terraform_1.5.7_linux_amd64.zip # Installing Yandex Cloud CLI RUN curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash # Copying Yandex Cloud CLI binary files to /usr/bin/ RUN cp -r ~/yandex-cloud/bin/* /usr/bin/ # Activating bash-completion RUN echo \"source /usr/share/bash-completion/bash_completion\" >> ~/.bashrc # Setting bash as the default shell. CMD [\"/bin/bash\"] Running a previously downloaded Dockerfile to create an Alpine Linux OS image with the required packages and dependencies # - docker build - create Docker-image # - -t mediawiki_service_alpine - arbitrary Docker-image name # - . - build context (where to look for the Dockerfile). In this case, it refers to the current directory docker build -t mediawiki_service_alpine . Start a Docker-container using the previously created Docker-image ( \"Alpine Linux:latest\" ) # - --hostname <hostname> - arbitrary VM hostname # - --name <Docker-container name> - arbitrary Docker-container name # - it <Docker-image name> - Docker-image name used for Docker-container building # - bash - shell docker run --hostname vm-0-service --name mediawiki_service_alpine-container -it mediawiki_service_alpine bash Attaching a Docker container to the VSCode workspace for convenient work Clone the Git repository to the VM-0 vm-0-service-virtual-machine (into the ~ directory). Create a Python virtual environment in ~/MediaWiki-Doc-Management-Service on the VM-0 vm-0-service-virtual-machine # Create a Python virtual environment python3 -m venv pyvenv # Activate a Python virtual environment source pyvenv/bin/activate # Upgrade pip python3 -m pip install --upgrade pip # Install requirements pip install -r python_scripts/requirements.txt # Commit changes when adding additional pip packages pip freeze > python_scripts/requirements.txt","title":"3. Service VM Docker Configuration"},{"location":"3.1.%20service_vm_docker_setup/#service-vm-docker-configuration","text":"Download and Install Docker-desktop Install VScode Docker extension Create Dockerfile ( GitHub ) Show Dockerfile # Using the Alpine Linux base image FROM alpine:latest # Updating packages and installing dependencies RUN apk update && apk add --no-cache \\ bash \\ bash-completion \\ curl \\ wget \\ git \\ unzip \\ python3 \\ py3-pip \\ gnupg \\ ca-certificates \\ sudo \\ openssh \\ sshpass \\ ansible # Generating SSH keys RUN ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N \"\" # Installing Terraform RUN wget https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip && \\ unzip terraform_1.5.7_linux_amd64.zip && \\ mv terraform /usr/local/bin/ && \\ rm terraform_1.5.7_linux_amd64.zip # Installing Yandex Cloud CLI RUN curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash # Copying Yandex Cloud CLI binary files to /usr/bin/ RUN cp -r ~/yandex-cloud/bin/* /usr/bin/ # Activating bash-completion RUN echo \"source /usr/share/bash-completion/bash_completion\" >> ~/.bashrc # Setting bash as the default shell. CMD [\"/bin/bash\"] Running a previously downloaded Dockerfile to create an Alpine Linux OS image with the required packages and dependencies # - docker build - create Docker-image # - -t mediawiki_service_alpine - arbitrary Docker-image name # - . - build context (where to look for the Dockerfile). In this case, it refers to the current directory docker build -t mediawiki_service_alpine . Start a Docker-container using the previously created Docker-image ( \"Alpine Linux:latest\" ) # - --hostname <hostname> - arbitrary VM hostname # - --name <Docker-container name> - arbitrary Docker-container name # - it <Docker-image name> - Docker-image name used for Docker-container building # - bash - shell docker run --hostname vm-0-service --name mediawiki_service_alpine-container -it mediawiki_service_alpine bash Attaching a Docker container to the VSCode workspace for convenient work Clone the Git repository to the VM-0 vm-0-service-virtual-machine (into the ~ directory). Create a Python virtual environment in ~/MediaWiki-Doc-Management-Service on the VM-0 vm-0-service-virtual-machine # Create a Python virtual environment python3 -m venv pyvenv # Activate a Python virtual environment source pyvenv/bin/activate # Upgrade pip python3 -m pip install --upgrade pip # Install requirements pip install -r python_scripts/requirements.txt # Commit changes when adding additional pip packages pip freeze > python_scripts/requirements.txt","title":"Service VM Docker Configuration"},{"location":"4.1.%20yandex_cloud_cli_and_serv_acc_setup/","text":"Yandex Cloud CLI profile and Service Account Setup Create yc_meta.json file with authentication data in ~/MediaWiki-Doc-Management-Service/credentials directory service_account_id , cloud-id , folder-id , profile-name Show yc_meta_EXAMPLE.json { \"service_account_id\": \"sadsdsdsd...\", \"cloud-id\": \"asdsadasd.....\", \"folder-id\": \"dadsad.....\", \"profile-name\": \"test_name\" } Create a Yandex Cloud CLI profile (if not already created) # Verify the Yandex Cloud CLI installation and profile configuration yc config list Add environment variables to ~/.bashrc user-specific configuration file for the Bash shell by running add_env_var.py ~/MediaWiki-Doc-Management-Service/python_scripts/add_env_var.py After running the script, you must restart the terminal Show .bashrc_EXAMPLE source /usr/share/bash-completion/bash_completion export REPO_NAME=\"repository_name\" export REPO_RELATIVE_PATH=\"~/repository_name\" export REPO_PATH=\"/username/repository_name\" export TERRAFORM_FOLDER_NAME=\"Terraform_MediaWiki\" export TERRAFORM_RELATIVE_PATH=\"~/repository_name/Terraform_MediaWiki\" export TERRAFORM_ABSOLUTE_PATH=\"/username/repository_name/Terraform_MediaWiki\" export ANSIBLE_DIR_NAME=\"Ansible\" export ANSIBLE_DIR_RELATIVE_PATH=\"~/repository_name/Ansible\" export ANSIBLE_DIR_ABSOLUTE_PATH=\"/username/repository_name/Ansible\" export PYTHON_SCRIPTS_DIR_NAME=\"python_scripts\" export PYTHON_SCRIPTS_DIR_RELATIVE_PATH=\"~/repository_name/python_scripts\" export PYTHON_SCRIPTS_DIR_ABSOLUTE_PATH=\"/username/repository_name/python_scripts\" export CREDENTIALS_DIR_NAME=\"credentials\" export CREDENTIALS_DIR_RELATIVE_PATH=\"~/repository_name/credentials\" export CREDENTIALS_DIR_ABSOLUTE_PATH=\"/username/repository_name/credentials\" export TF_VAR_TERRAFORM_META_DIR_ABSOLUTE_PATH=\"/username/repository_name/credentials/terraform_meta.txt\" export YC_TOKEN=\"$(yc iam create-token)\" export YC_CLOUD_ID=\"$(yc config get cloud-id)\" export YC_FOLDER_ID=\"$(yc config get folder-id)\" Set up Yandex Cloud service account configuration by running yc_service_account_configuration.py ~/MediaWiki-Doc-Management-Service/python_scripts/yc_service_account_configuration.py Create and configure a local Yandex Cloud (yc) profile, and automatically generate the key.json ~/MediaWiki-Doc-Management-Service/credentials/key.json file with authentication data.","title":"4. Yandex Cloud CLI profile and Service Account Setup"},{"location":"4.1.%20yandex_cloud_cli_and_serv_acc_setup/#yandex-cloud-cli-profile-and-service-account-setup","text":"Create yc_meta.json file with authentication data in ~/MediaWiki-Doc-Management-Service/credentials directory service_account_id , cloud-id , folder-id , profile-name Show yc_meta_EXAMPLE.json { \"service_account_id\": \"sadsdsdsd...\", \"cloud-id\": \"asdsadasd.....\", \"folder-id\": \"dadsad.....\", \"profile-name\": \"test_name\" } Create a Yandex Cloud CLI profile (if not already created) # Verify the Yandex Cloud CLI installation and profile configuration yc config list Add environment variables to ~/.bashrc user-specific configuration file for the Bash shell by running add_env_var.py ~/MediaWiki-Doc-Management-Service/python_scripts/add_env_var.py After running the script, you must restart the terminal Show .bashrc_EXAMPLE source /usr/share/bash-completion/bash_completion export REPO_NAME=\"repository_name\" export REPO_RELATIVE_PATH=\"~/repository_name\" export REPO_PATH=\"/username/repository_name\" export TERRAFORM_FOLDER_NAME=\"Terraform_MediaWiki\" export TERRAFORM_RELATIVE_PATH=\"~/repository_name/Terraform_MediaWiki\" export TERRAFORM_ABSOLUTE_PATH=\"/username/repository_name/Terraform_MediaWiki\" export ANSIBLE_DIR_NAME=\"Ansible\" export ANSIBLE_DIR_RELATIVE_PATH=\"~/repository_name/Ansible\" export ANSIBLE_DIR_ABSOLUTE_PATH=\"/username/repository_name/Ansible\" export PYTHON_SCRIPTS_DIR_NAME=\"python_scripts\" export PYTHON_SCRIPTS_DIR_RELATIVE_PATH=\"~/repository_name/python_scripts\" export PYTHON_SCRIPTS_DIR_ABSOLUTE_PATH=\"/username/repository_name/python_scripts\" export CREDENTIALS_DIR_NAME=\"credentials\" export CREDENTIALS_DIR_RELATIVE_PATH=\"~/repository_name/credentials\" export CREDENTIALS_DIR_ABSOLUTE_PATH=\"/username/repository_name/credentials\" export TF_VAR_TERRAFORM_META_DIR_ABSOLUTE_PATH=\"/username/repository_name/credentials/terraform_meta.txt\" export YC_TOKEN=\"$(yc iam create-token)\" export YC_CLOUD_ID=\"$(yc config get cloud-id)\" export YC_FOLDER_ID=\"$(yc config get folder-id)\" Set up Yandex Cloud service account configuration by running yc_service_account_configuration.py ~/MediaWiki-Doc-Management-Service/python_scripts/yc_service_account_configuration.py Create and configure a local Yandex Cloud (yc) profile, and automatically generate the key.json ~/MediaWiki-Doc-Management-Service/credentials/key.json file with authentication data.","title":"Yandex Cloud CLI profile and Service Account Setup"},{"location":"5.1.%20yandex_cloud_terraform_setup/","text":"Yandex Cloud Terraform Setup Create .terraformrc provider configuration file in ~/ directory Automatic Yandex Cloud Terraform provider installation by running terraform_init.py ~/MediaWiki-Doc-Management-Service/python_scripts/terraform_init.py The main.tf ~/MediaWiki-Doc-Management-Service/Terraform_MediaWiki/main.tf , output.tf ~/MediaWiki-Doc-Management-Service/Terraform_MediaWiki/output.tf , providers.tf ~/MediaWiki-Doc-Management-Service/Terraform_MediaWiki/providers.tf , and terraform.tfstate ~/MediaWiki-Doc-Management-Service/Terraform_MediaWiki/terraform.tfstate files are already configured. No changes are needed Automatic authentication data file (terraform_meta.txt) ~/MediaWiki-Doc-Management-Service/credentials/terraform_meta.txt creation by running update_terraform_meta.py ~/MediaWiki-Doc-Management-Service/python_scripts/update_terraform_meta.py Files with public and private SSH keys are automatically created in the ~/.ssh folder during the image build and when a new container is launched If you need to use the same keys as on another already deployed VM, you must manually copy them from that VM to the new one and run the script Essential Terraform commands (execute in Terraform core folder) # Syntax check of all .tf files terraform validate # Planning and reviewing what Terraform will do terraform plan # Getting started and deploying with Terraform terraform apply -auto-approve # Synchronizing the state of resources with the cloud provider (the terraform.tfstate file will be updated) terraform apply -refresh-only # Deleting all created resources terraform destroy -auto-approve # Retrieving the list of VMs yc compute instance list # Stopping the specified VM yc compute instance stop --id <instance-id> # Mark a resource as 'tainted' for subsequent recreation terraform taint 'yandex_compute_instance.group<GROUP NUMBER>[\"vm-<VM NUMBER>\"]'","title":"5. Yandex Cloud Terraform Setup"},{"location":"5.1.%20yandex_cloud_terraform_setup/#yandex-cloud-terraform-setup","text":"Create .terraformrc provider configuration file in ~/ directory Automatic Yandex Cloud Terraform provider installation by running terraform_init.py ~/MediaWiki-Doc-Management-Service/python_scripts/terraform_init.py The main.tf ~/MediaWiki-Doc-Management-Service/Terraform_MediaWiki/main.tf , output.tf ~/MediaWiki-Doc-Management-Service/Terraform_MediaWiki/output.tf , providers.tf ~/MediaWiki-Doc-Management-Service/Terraform_MediaWiki/providers.tf , and terraform.tfstate ~/MediaWiki-Doc-Management-Service/Terraform_MediaWiki/terraform.tfstate files are already configured. No changes are needed Automatic authentication data file (terraform_meta.txt) ~/MediaWiki-Doc-Management-Service/credentials/terraform_meta.txt creation by running update_terraform_meta.py ~/MediaWiki-Doc-Management-Service/python_scripts/update_terraform_meta.py Files with public and private SSH keys are automatically created in the ~/.ssh folder during the image build and when a new container is launched If you need to use the same keys as on another already deployed VM, you must manually copy them from that VM to the new one and run the script Essential Terraform commands (execute in Terraform core folder) # Syntax check of all .tf files terraform validate # Planning and reviewing what Terraform will do terraform plan # Getting started and deploying with Terraform terraform apply -auto-approve # Synchronizing the state of resources with the cloud provider (the terraform.tfstate file will be updated) terraform apply -refresh-only # Deleting all created resources terraform destroy -auto-approve # Retrieving the list of VMs yc compute instance list # Stopping the specified VM yc compute instance stop --id <instance-id> # Mark a resource as 'tainted' for subsequent recreation terraform taint 'yandex_compute_instance.group<GROUP NUMBER>[\"vm-<VM NUMBER>\"]'","title":"Yandex Cloud Terraform Setup"},{"location":"6.1.%20ansible_setup/","text":"Ansible setup Files and Variables Setup Review or Modify the ansible_structure.py ~/MediaWiki-Doc-Management-Service/python_scripts/ansible_structure.py file This file contains dynamic_groups dictionary which confugires the output inventory.yaml file The file is already configured. No changes are needed. Create inventory.yaml ~/MediaWiki-Doc-Management-Service/Ansible/inventory.yaml by running update_ansible_inventory.py ~/MediaWiki-Doc-Management-Service/python_scripts/update_ansible_inventory.py Show inventory.yaml_EXAMPLE linuxVM: children: monitoringSystem: hosts: vm-1-monitoring-system: ansible_host: 51.250.1.167 external_disks: - disk_id: fhmmla0r5sm2j6c4le8l disk_name: vhdd-1-monitoring-system-db mount_point: /opt/vhdd-1-monitoring-system-db filesystem: ext4 nginxProxyServer: hosts: vm-2-nginx-proxy-server: ansible_host: 130.193.38.129 mediawikiServer: hosts: vm-3-mediawiki-server-1: ansible_host: 130.193.37.91 vm-4-mediawiki-server-2: ansible_host: 62.84.116.227 haproxyProxyServer: hosts: vm-5-haproxy-proxy-server: ansible_host: 130.193.36.108 primaryDb: hosts: vm-6-primary-db: ansible_host: 84.252.128.13 external_disks: - disk_id: fhmvasqeieo3t7nqlol7 disk_name: vssd-1-primary-db mount_point: /opt/vssd-1-primary-db filesystem: ext4 standbyDb: hosts: vm-7-standby-db: ansible_host: 51.250.67.113 external_disks: - disk_id: fhm0653bevuv57f7ng16 disk_name: vhdd-2-standby-db mount_point: /opt/vhdd-2-standby-db filesystem: ext4 - disk_id: fhm9rbu6jc8q2ak0cni2 disk_name: vhdd-3-dump-db mount_point: /opt/vhdd-3-dump-db filesystem: ext4 vars: ansible_user: root ansible_password: '' connection_protocol: ssh Review or Replace the Private SSH Key File in the ~/MediaWiki-Doc-Management-Service/Ansible/common_files Directory This Private SSH Key file is required to allow SSH connections between specific VMs # If there is no Private SSH Key file, or if you wish to replace the current one, run the following command cp ~/.ssh/id_ed25519 ~/MediaWiki-Doc-Management-Service/Ansible/common_files File Encryption with Ansible Voult # Encrypting the Private SSH Key File Using Vault-ID: \"private_ssh_key\" ansible-vault encrypt --vault-id private_ssh_key@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/id_ed25519\" Write Ansible Voult password to file: echo \"password1\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_private_ssh_key.txt Review or Modify the ansible_secrets.yml ~/MediaWiki-Doc-Management-Service/Ansible/common_files/ansible_secrets.yml File The ansible_secrets.yml file contains secret variables, such as database connection credentials, IP addresses, and more Show ansible_secrets.yml_EXAMPLE --- # vars file for db_postgresql postgres_vars: db_name: my_wiki db_tablespace_name: primary_tablespace db_port: 5432 db_backups_dir: /opt/vhdd-3-dump-db postgres_zabbix_server_vars: db_name: zabbix db_tablespace_name: primary_tablespace db_port: 5432 db_backups_dir: /opt/vhdd-1-monitoring-system-db/zabbix_dump postgres_wikiuser_user_vars: db_user: wikiuser db_user_password: password1 attr: - SUPERUSER - CREATEDB - CREATEROLE - LOGIN - INHERIT postgres_replication_user_vars: db_user: syncuser db_user_password: password2 attr: - REPLICATION postgres_zabbix_server_user_vars: db_user: zabbix db_user_password: password1 attr: - SUPERUSER - CREATEDB - CREATEROLE - LOGIN - INHERIT vm_7_standby_db_private_key_ssh: remote_host: 192.168.10.16 remote_user: root private_key_ssh_path: /root/.ssh/id_ed25519 secret_vm_3_mediawiki_server_1: host_ip: 192.168.10.13 user: root secret_vm_4_mediawiki_server_2: host_ip: 192.168.10.14 user: root remote_host_ip: 192.168.10.13 remote_user: root File Encryption with Ansible Voult # Encrypting the ansible_secrets.yml File Using Vault-ID: \"ansible_secrets\" ansible-vault encrypt --vault-id ansible_secrets@prompt ~/MediaWiki-Doc-Management-Service/Ansible/common_files/ansible_secrets.yaml Write Ansible Voult password to file: echo \"password2\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt Review or Modify the LocalSettings.php ~/MediaWiki-Doc-Management-Service/Ansible/common_files/LocalSettings.php File The LocalSettings.php file contains the MediaWiki configuration Pay attention to the following blocks and lines in the file: line: $wgServer = 'http://nginx-proxy server IP or URL address'; The address that users will use to access the MediaWiki service line: $wgDefaultSkin = 'monobook'; The theme MediaWiki service block: Database settings Credentials for Database Connection block: Postgres specific settings Database Connection Settings Show LocalSettings.php_EXAMPLE <?php # This file was automatically generated by the MediaWiki 1.42.3 # installer. If you make manual changes, please keep track in case you # need to recreate them later. # # See includes/MainConfigSchema.php for all configurable settings # and their default values, but don't forget to make changes in _this_ # file, not there. # # Further documentation for configuration settings may be found at: # https://www.mediawiki.org/wiki/Manual:Configuration_settings # Protect against web entry if ( !defined( 'MEDIAWIKI' ) ) { exit; } ## Uncomment this to disable output compression # $wgDisableOutputCompression = true; $wgSitename = 'sprint13_yp'; $wgMetaNamespace = 'Sprint13_yp'; ## The URL base path to the directory containing the wiki; ## defaults for all runtime URL paths are based off of this. ## For more information on customizing the URLs ## (like /w/index.php/Page_title to /wiki/Page_title) please see: ## https://www.mediawiki.org/wiki/Manual:Short_URL $wgScriptPath = ''; ## The protocol and server name to use in fully-qualified URLs $wgServer = 'http://130.193.39.49'; ## The URL path to static resources (images, scripts, etc.) $wgResourceBasePath = $wgScriptPath; ## The URL paths to the logo. Make sure you change this from the default, ## or else you'll overwrite your logo when you upgrade! $wgLogos = [ '1x' => \"$wgResourceBasePath/resources/assets/change-your-logo.svg\", 'icon' => \"$wgResourceBasePath/resources/assets/change-your-logo.svg\", ]; ## UPO means: this is also a user preference option $wgEnableEmail = true; $wgEnableUserEmail = true; # UPO $wgEmergencyContact = ''; $wgPasswordSender = ''; $wgEnotifUserTalk = false; # UPO $wgEnotifWatchlist = false; # UPO $wgEmailAuthentication = true; ## Database settings $wgDBtype = 'postgres'; $wgDBserver = '192.168.10.16'; $wgDBname = 'my_wiki'; $wgDBuser = 'wikiuser'; $wgDBpassword = 'YOUR_SUPER_STRONG_PASSWORD'; # Postgres specific settings $wgDBport = \"5432\"; $wgDBssl = false; $wgDBmwschema = \"mediawiki\"; # Shared database table # This has no effect unless $wgSharedDB is also set. $wgSharedTables[] = \"actor\"; ## Shared memory settings $wgMainCacheType = CACHE_ACCEL; $wgMemCachedServers = []; ## To enable image uploads, make sure the 'images' directory ## is writable, then set this to true: $wgEnableUploads = false; #$wgUseImageMagick = true; #$wgImageMagickConvertCommand = '/usr/bin/convert'; # InstantCommons allows wiki to use images from https://commons.wikimedia.org $wgUseInstantCommons = false; # Periodically send a pingback to https://www.mediawiki.org/ with basic data # about this MediaWiki instance. The Wikimedia Foundation shares this data # with MediaWiki developers to help guide future development efforts. $wgPingback = true; # Site language code, should be one of the list in ./includes/languages/data/Names.php $wgLanguageCode = 'en'; # Time zone $wgLocaltimezone = 'UTC'; ## Set $wgCacheDirectory to a writable directory on the web server ## to make your wiki go slightly faster. The directory should not ## be publicly accessible from the web. #$wgCacheDirectory = \"$IP/cache\"; $wgSecretKey = '2d4a43e01b5d47793a1120c3cdff6440a6974780e8fe3b57504dfd388ddc3326'; # Changing this will log out all existing sessions. $wgAuthenticationTokenVersion = '1'; # Site upgrade key. Must be set to a string (default provided) to turn on the # web installer while LocalSettings.php is in place $wgUpgradeKey = '09a43ca42d627f31'; ## For attaching licensing metadata to pages, and displaying an ## appropriate copyright notice / icon. GNU Free Documentation ## License and Creative Commons licenses are supported so far. $wgRightsPage = \"\"; # Set to the title of a wiki page that describes your license/copyright $wgRightsUrl = ''; $wgRightsText = ''; $wgRightsIcon = \"\"; # Path to the GNU diff3 utility. Used for conflict resolution. $wgDiff3 = '/usr/bin/diff3'; ## Default skin: you can change the default skin. Use the internal symbolic ## names, e.g. 'vector' or 'monobook': $wgDefaultSkin = 'monobook'; # Enabled skins. # The following skins were automatically enabled: wfLoadSkin( 'MinervaNeue' ); wfLoadSkin( 'MonoBook' ); wfLoadSkin( 'Timeless' ); wfLoadSkin( 'Vector' ); # End of automatically generated settings. # Add more configuration options below. File Encryption with Ansible Voult # Encrypting the LocalSettings.php File Using Vault-ID: \"mediawiki_localsettings\" ansible-vault encrypt --vault-id mediawiki_localsettings@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/LocalSettings.php\" Write Ansible Voult password to file: echo \"password3\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_mediawiki_localsettings.txt DDNS Setup DDNS is used to eliminate the need to change IP addresses in configuration files. To configure DDNS, follow these steps: Register with a DDNS provider, such as noip.com Creating a custom hostname Configuring the Dynamic Update Client (DUC) DUC configuration is performed during Ansible tasks, so there is no need to configure it manually Review or modify the two noip-duc files: The duc_nginx_mediawiki ~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_nginx_mediawiki File The duc_zabbix_server ~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_zabbix_server File The noip-duc file contains the noip.com credentials for automatically updating the NAT IP address with the DDNS provider Show noip-duc_EXAMPLE NOIP_USERNAME=myusername NOIP_PASSWORD=mypassword NOIP_HOSTNAMES=example.ddns.net File Encryption with Ansible Voult # Encrypting the duc_nginx_mediawiki File Using Vault-ID: \"duc_nginx_mediawiki\" ansible-vault encrypt --vault-id duc_nginx_mediawiki@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_nginx_mediawiki\" # Encrypting the duc_zabbix_server File Using Vault-ID: \"duc_zabbix_server\" ansible-vault encrypt --vault-id duc_nginx_mediawiki@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_zabbix_server\" Write Ansible Voult password to file: echo \"password4\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_duc_zabbix_server.txt echo \"password5\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_duc_nginx_mediawiki.txt Essential Ansible commands Ansible # Checking syntax and availability of cloud resources ansible all -m ping -i inventory.yaml # Installing or updating the collection ansible-galaxy collection install <collection name> # List of installed collections ansible-galaxy collection list # Creating a role (used to separate tasks that will be executed within the playbook) ansible-galaxy init <role name> # List of used roles ansible-galaxy role list # Running the playbook ansible-playbook <playbook>.yaml name> -i <inventory>.yaml name> --tags=\"<tag>\" #Example: ansible-playbook mount_disks_playbook.yaml -i inventory.yaml --tags=\"mount\" Ansible Vault # Encrypting File using Ansible Vault ansible-vault encrypt --vault-id <vault-id-name>@prompt \"<path to file>\" # Change Vault Password ansible-vault rekey \"<path to file>\" # Edit Vault-Encrypted File ansible-vault edit \"<path to file>\" # Decrypting File ansible-vault decrypt \"<path to file>\" # Viewing the Vault-Encrypted File ansible-vault view \"<path to file>\"","title":"6. Ansible Setup"},{"location":"6.1.%20ansible_setup/#ansible-setup","text":"","title":"Ansible setup"},{"location":"6.1.%20ansible_setup/#files-and-variables-setup","text":"Review or Modify the ansible_structure.py ~/MediaWiki-Doc-Management-Service/python_scripts/ansible_structure.py file This file contains dynamic_groups dictionary which confugires the output inventory.yaml file The file is already configured. No changes are needed. Create inventory.yaml ~/MediaWiki-Doc-Management-Service/Ansible/inventory.yaml by running update_ansible_inventory.py ~/MediaWiki-Doc-Management-Service/python_scripts/update_ansible_inventory.py Show inventory.yaml_EXAMPLE linuxVM: children: monitoringSystem: hosts: vm-1-monitoring-system: ansible_host: 51.250.1.167 external_disks: - disk_id: fhmmla0r5sm2j6c4le8l disk_name: vhdd-1-monitoring-system-db mount_point: /opt/vhdd-1-monitoring-system-db filesystem: ext4 nginxProxyServer: hosts: vm-2-nginx-proxy-server: ansible_host: 130.193.38.129 mediawikiServer: hosts: vm-3-mediawiki-server-1: ansible_host: 130.193.37.91 vm-4-mediawiki-server-2: ansible_host: 62.84.116.227 haproxyProxyServer: hosts: vm-5-haproxy-proxy-server: ansible_host: 130.193.36.108 primaryDb: hosts: vm-6-primary-db: ansible_host: 84.252.128.13 external_disks: - disk_id: fhmvasqeieo3t7nqlol7 disk_name: vssd-1-primary-db mount_point: /opt/vssd-1-primary-db filesystem: ext4 standbyDb: hosts: vm-7-standby-db: ansible_host: 51.250.67.113 external_disks: - disk_id: fhm0653bevuv57f7ng16 disk_name: vhdd-2-standby-db mount_point: /opt/vhdd-2-standby-db filesystem: ext4 - disk_id: fhm9rbu6jc8q2ak0cni2 disk_name: vhdd-3-dump-db mount_point: /opt/vhdd-3-dump-db filesystem: ext4 vars: ansible_user: root ansible_password: '' connection_protocol: ssh Review or Replace the Private SSH Key File in the ~/MediaWiki-Doc-Management-Service/Ansible/common_files Directory This Private SSH Key file is required to allow SSH connections between specific VMs # If there is no Private SSH Key file, or if you wish to replace the current one, run the following command cp ~/.ssh/id_ed25519 ~/MediaWiki-Doc-Management-Service/Ansible/common_files File Encryption with Ansible Voult # Encrypting the Private SSH Key File Using Vault-ID: \"private_ssh_key\" ansible-vault encrypt --vault-id private_ssh_key@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/id_ed25519\" Write Ansible Voult password to file: echo \"password1\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_private_ssh_key.txt Review or Modify the ansible_secrets.yml ~/MediaWiki-Doc-Management-Service/Ansible/common_files/ansible_secrets.yml File The ansible_secrets.yml file contains secret variables, such as database connection credentials, IP addresses, and more Show ansible_secrets.yml_EXAMPLE --- # vars file for db_postgresql postgres_vars: db_name: my_wiki db_tablespace_name: primary_tablespace db_port: 5432 db_backups_dir: /opt/vhdd-3-dump-db postgres_zabbix_server_vars: db_name: zabbix db_tablespace_name: primary_tablespace db_port: 5432 db_backups_dir: /opt/vhdd-1-monitoring-system-db/zabbix_dump postgres_wikiuser_user_vars: db_user: wikiuser db_user_password: password1 attr: - SUPERUSER - CREATEDB - CREATEROLE - LOGIN - INHERIT postgres_replication_user_vars: db_user: syncuser db_user_password: password2 attr: - REPLICATION postgres_zabbix_server_user_vars: db_user: zabbix db_user_password: password1 attr: - SUPERUSER - CREATEDB - CREATEROLE - LOGIN - INHERIT vm_7_standby_db_private_key_ssh: remote_host: 192.168.10.16 remote_user: root private_key_ssh_path: /root/.ssh/id_ed25519 secret_vm_3_mediawiki_server_1: host_ip: 192.168.10.13 user: root secret_vm_4_mediawiki_server_2: host_ip: 192.168.10.14 user: root remote_host_ip: 192.168.10.13 remote_user: root File Encryption with Ansible Voult # Encrypting the ansible_secrets.yml File Using Vault-ID: \"ansible_secrets\" ansible-vault encrypt --vault-id ansible_secrets@prompt ~/MediaWiki-Doc-Management-Service/Ansible/common_files/ansible_secrets.yaml Write Ansible Voult password to file: echo \"password2\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt Review or Modify the LocalSettings.php ~/MediaWiki-Doc-Management-Service/Ansible/common_files/LocalSettings.php File The LocalSettings.php file contains the MediaWiki configuration Pay attention to the following blocks and lines in the file: line: $wgServer = 'http://nginx-proxy server IP or URL address'; The address that users will use to access the MediaWiki service line: $wgDefaultSkin = 'monobook'; The theme MediaWiki service block: Database settings Credentials for Database Connection block: Postgres specific settings Database Connection Settings Show LocalSettings.php_EXAMPLE <?php # This file was automatically generated by the MediaWiki 1.42.3 # installer. If you make manual changes, please keep track in case you # need to recreate them later. # # See includes/MainConfigSchema.php for all configurable settings # and their default values, but don't forget to make changes in _this_ # file, not there. # # Further documentation for configuration settings may be found at: # https://www.mediawiki.org/wiki/Manual:Configuration_settings # Protect against web entry if ( !defined( 'MEDIAWIKI' ) ) { exit; } ## Uncomment this to disable output compression # $wgDisableOutputCompression = true; $wgSitename = 'sprint13_yp'; $wgMetaNamespace = 'Sprint13_yp'; ## The URL base path to the directory containing the wiki; ## defaults for all runtime URL paths are based off of this. ## For more information on customizing the URLs ## (like /w/index.php/Page_title to /wiki/Page_title) please see: ## https://www.mediawiki.org/wiki/Manual:Short_URL $wgScriptPath = ''; ## The protocol and server name to use in fully-qualified URLs $wgServer = 'http://130.193.39.49'; ## The URL path to static resources (images, scripts, etc.) $wgResourceBasePath = $wgScriptPath; ## The URL paths to the logo. Make sure you change this from the default, ## or else you'll overwrite your logo when you upgrade! $wgLogos = [ '1x' => \"$wgResourceBasePath/resources/assets/change-your-logo.svg\", 'icon' => \"$wgResourceBasePath/resources/assets/change-your-logo.svg\", ]; ## UPO means: this is also a user preference option $wgEnableEmail = true; $wgEnableUserEmail = true; # UPO $wgEmergencyContact = ''; $wgPasswordSender = ''; $wgEnotifUserTalk = false; # UPO $wgEnotifWatchlist = false; # UPO $wgEmailAuthentication = true; ## Database settings $wgDBtype = 'postgres'; $wgDBserver = '192.168.10.16'; $wgDBname = 'my_wiki'; $wgDBuser = 'wikiuser'; $wgDBpassword = 'YOUR_SUPER_STRONG_PASSWORD'; # Postgres specific settings $wgDBport = \"5432\"; $wgDBssl = false; $wgDBmwschema = \"mediawiki\"; # Shared database table # This has no effect unless $wgSharedDB is also set. $wgSharedTables[] = \"actor\"; ## Shared memory settings $wgMainCacheType = CACHE_ACCEL; $wgMemCachedServers = []; ## To enable image uploads, make sure the 'images' directory ## is writable, then set this to true: $wgEnableUploads = false; #$wgUseImageMagick = true; #$wgImageMagickConvertCommand = '/usr/bin/convert'; # InstantCommons allows wiki to use images from https://commons.wikimedia.org $wgUseInstantCommons = false; # Periodically send a pingback to https://www.mediawiki.org/ with basic data # about this MediaWiki instance. The Wikimedia Foundation shares this data # with MediaWiki developers to help guide future development efforts. $wgPingback = true; # Site language code, should be one of the list in ./includes/languages/data/Names.php $wgLanguageCode = 'en'; # Time zone $wgLocaltimezone = 'UTC'; ## Set $wgCacheDirectory to a writable directory on the web server ## to make your wiki go slightly faster. The directory should not ## be publicly accessible from the web. #$wgCacheDirectory = \"$IP/cache\"; $wgSecretKey = '2d4a43e01b5d47793a1120c3cdff6440a6974780e8fe3b57504dfd388ddc3326'; # Changing this will log out all existing sessions. $wgAuthenticationTokenVersion = '1'; # Site upgrade key. Must be set to a string (default provided) to turn on the # web installer while LocalSettings.php is in place $wgUpgradeKey = '09a43ca42d627f31'; ## For attaching licensing metadata to pages, and displaying an ## appropriate copyright notice / icon. GNU Free Documentation ## License and Creative Commons licenses are supported so far. $wgRightsPage = \"\"; # Set to the title of a wiki page that describes your license/copyright $wgRightsUrl = ''; $wgRightsText = ''; $wgRightsIcon = \"\"; # Path to the GNU diff3 utility. Used for conflict resolution. $wgDiff3 = '/usr/bin/diff3'; ## Default skin: you can change the default skin. Use the internal symbolic ## names, e.g. 'vector' or 'monobook': $wgDefaultSkin = 'monobook'; # Enabled skins. # The following skins were automatically enabled: wfLoadSkin( 'MinervaNeue' ); wfLoadSkin( 'MonoBook' ); wfLoadSkin( 'Timeless' ); wfLoadSkin( 'Vector' ); # End of automatically generated settings. # Add more configuration options below. File Encryption with Ansible Voult # Encrypting the LocalSettings.php File Using Vault-ID: \"mediawiki_localsettings\" ansible-vault encrypt --vault-id mediawiki_localsettings@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/LocalSettings.php\" Write Ansible Voult password to file: echo \"password3\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_mediawiki_localsettings.txt","title":"Files and Variables Setup"},{"location":"6.1.%20ansible_setup/#ddns-setup","text":"DDNS is used to eliminate the need to change IP addresses in configuration files. To configure DDNS, follow these steps: Register with a DDNS provider, such as noip.com Creating a custom hostname Configuring the Dynamic Update Client (DUC) DUC configuration is performed during Ansible tasks, so there is no need to configure it manually Review or modify the two noip-duc files: The duc_nginx_mediawiki ~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_nginx_mediawiki File The duc_zabbix_server ~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_zabbix_server File The noip-duc file contains the noip.com credentials for automatically updating the NAT IP address with the DDNS provider Show noip-duc_EXAMPLE NOIP_USERNAME=myusername NOIP_PASSWORD=mypassword NOIP_HOSTNAMES=example.ddns.net File Encryption with Ansible Voult # Encrypting the duc_nginx_mediawiki File Using Vault-ID: \"duc_nginx_mediawiki\" ansible-vault encrypt --vault-id duc_nginx_mediawiki@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_nginx_mediawiki\" # Encrypting the duc_zabbix_server File Using Vault-ID: \"duc_zabbix_server\" ansible-vault encrypt --vault-id duc_nginx_mediawiki@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_zabbix_server\" Write Ansible Voult password to file: echo \"password4\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_duc_zabbix_server.txt echo \"password5\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_duc_nginx_mediawiki.txt","title":"DDNS Setup"},{"location":"6.1.%20ansible_setup/#essential-ansible-commands","text":"Ansible # Checking syntax and availability of cloud resources ansible all -m ping -i inventory.yaml # Installing or updating the collection ansible-galaxy collection install <collection name> # List of installed collections ansible-galaxy collection list # Creating a role (used to separate tasks that will be executed within the playbook) ansible-galaxy init <role name> # List of used roles ansible-galaxy role list # Running the playbook ansible-playbook <playbook>.yaml name> -i <inventory>.yaml name> --tags=\"<tag>\" #Example: ansible-playbook mount_disks_playbook.yaml -i inventory.yaml --tags=\"mount\" Ansible Vault # Encrypting File using Ansible Vault ansible-vault encrypt --vault-id <vault-id-name>@prompt \"<path to file>\" # Change Vault Password ansible-vault rekey \"<path to file>\" # Edit Vault-Encrypted File ansible-vault edit \"<path to file>\" # Decrypting File ansible-vault decrypt \"<path to file>\" # Viewing the Vault-Encrypted File ansible-vault view \"<path to file>\"","title":"Essential Ansible commands"},{"location":"7.1.%20ansible_pipeline/","text":"Ansible pipeline Changing the hostnames of all VMs Ansible Compare the current VM hostname with inventory.yaml ~/MediaWiki-Doc-Management-Service/Ansible/inventory.yaml and change it if it differs. ansible-playbook playbook.yaml -i inventory.yaml --tags=\"change_vms_hostname\" Manual # Check the current VM hostname hostnamectl # Set a New Hostname hostnamectl set-hostname new-hostname Mounting external hard drives and initializing LVM Ansible Creating a disk partition , physical volume , volume group , logical volume , and a mount point in /opt directory Create an entry in /etc/fstab to automount the disk after a VM restart ansible-playbook playbook.yaml -i inventory.yaml --tags=\"mount_external_hard_drives\" Manual Display information about disks and partitions lsblk -f Partitioning the disk with new partitions # Example: fdisk /dev/vdb fdisk /dev/<device_name> # The \"fdisk\" console opens - g \u2014 create a GPT partition table - n \u2014 create a disk partition > > specify the partition number (usually 1) > > press Enter (when prompted about sectors) - w \u2014 save changes and exit Initializing the Physical Volume # Display information about disks and partitions lsblk -f # Create PV # Example: pvcreate /dev/vdb1 pvcreate /dev/<partition_name> Creating a Volume Group # Create VG # Example: vgcreate vg-db-storage /dev/vdb1 vgcreate <volume_group_name> /dev/<partition_name> # Check that the VG is created vgs Creating a Logical Volume # Check the number of physical extents vgdisplay # Create LV # Example: lvcreate -n lv-db -l 5119 vg-db-storage lvcreate -n <LV_name> -l <number of extents> <VG_name> # Check that the LV is created lvs Formatting the LV and creating an ext4 file system # Example: mkfs.ext4 /dev/vg-db-storage/lv-db mkfs.ext4 /dev/<VG_name>/<LV_name> Creating a Mount Point # Example: mkdir /opt/db_mount/ mkdir /opt/<directory_name>/ Mounting the LV # Example: mount /dev/vg-db-storage/lv-db /opt/db_mount/ mount /dev/<VG_name>/<LV_name> <mount_point> Create an entry in /etc/fstab to automount the disk after a VM restart # Example: echo \"/dev/vg-db-storage/lv-db /opt/db_mount/ ext4 defaults 0 0\" | sudo tee -a /etc/fstab echo \"/dev/<VG_name>/<LV_name> ext4 defaults 0 0\" | sudo tee -a /etc/fstab # Check automount cat /etc/fstab or mount -a Unmounting external hard drives and deinitializing LVM (Optional) Ansible Deleting a disk partition , physical volume , volume group , logical volume , and unmount a mount point in /opt directory ansible-playbook playbook.yaml -i inventory.yaml --tags=\"unmount_external_hard_drives\" Manual Display information about disks and partitions lsblk -f Unmounting the LV # Example: umount /opt/db_mount/ umount <path_to_mount_point> Removing a Logical Volume # Display information about LV lvdisplay # Remove LV # Example: lvremove /dev/vg-db-storage/lv-db lvremove /dev/<VG_name>/<LV_name> Removing a Volume Group # Display information about VG vgdisplay # Remove VG # Example: vgremove /dev/vg-db-storage vgremove /dev/<VG_name> Removing a Partition and Physical Volume # Display information about Partition fdisk -l or sblk -f # Example: fdisk /dev/vdb fdisk /dev/<device_name> # The \"fdisk\" console opens - g \u2014 display current partitions - d \u2014 remove a disk partition > > specify the partition number (usually 1) - w \u2014 save changes and exit Postgresql Common Setup Target VMs: VM-1 vm-1-monitoring-system VM-6 vm-6-primary-db , VM-7 vm-7-standby-db Ansible Tasks: # Step 1 - Update list of packages # Step 2 - Apt packages installing # Step 3 - Pip3 packages installing # Step 4 - Starting and enabling the postgresql service # Step 5 - Adding secret variables # Step 6 - Creating dynamic variables # Step 7 - Creating a \"dbadmin\" security group # Step 8 - Adding multiple users to \"dbadmin\" group # Step 9 - Changing group ownership for PostgreSQL directories # Step 10 - Setting permissions for PostgreSQL directories # Step 11 - Stopping the PostgreSQL service # Step 12 - Creating a backup archive of the main PostgreSQL directory # Step 13 - Checking for the presence of a mount point # Step 14 - Copying (with -a flag) the current main database directory to the mount point # Step 15 - Deleting the old main Postresql directory # Step 16 - Configuring the data_directory in /etc/postgresql/14/main/postgresql.conf # Step 17 - Configuring the listen_addresses in /etc/postgresql/14/main/postgresql.conf # Step 18 - Adding permissions to pg_hba.conf for connecting to the PostgreSQL (perform only on the MediaWiki db's) # Step 19 - Restarting the PostgreSQL service # Step 20 - Creating the ``/scripts`` directory with '0755' permissions # Step 21 - Creating the **.env** file in ``/scripts`` directory with '0740' permissions # Step 22 - Copying the **pgdump_standby_postgresql.py** script to ``~/scripts`` with '0755' permissions (perform only on the MediaWiki db's) # Step 23 - Filling the **.env** file in ``/scripts'' directory with data # Step 24 - Copying **Private ssh-key** to ``~/.ssh`` with '600' permissions (perform only on the MediaWiki db's) # Step 25 - Copying the **logrotate_pgdump_standby_posgresql** file to ``/etc/logrotate.d/`` (perform only on the MediaWiki db's) # Step 26 - Starting and enabling the **logrotate service** (perform only on the MediaWiki db's) Running playbook: ansible-playbook playbook.yaml \\ --vault-id ansible_secrets@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt \\ -i inventory.yaml --tags=\"postgresql_common_setup\" Manual Steps 1, 2, 3 - Upgrage apt, install apt packages, install pip3 packages Show apt and pip3 packages to install --- # vars file for db_postgresql apt_packages_to_install: - postgresql - postgresql-contrib - python3-psycopg2 - acl - rsync - python3 - python3-venv - python3-pip pip3_packages_to_install: - pip>=24.3.1 - python-dotenv Step 4 - Enable postgresql services systemctl start postgresql systemctl enable postgresql # Check postgresql services status systemctl status postgresql systemctl is-enabled postgresql Steps 5, 6 - Skipping Step 7 - Creating security group - dbadmin groupadd dbadmin # verify the group getent group dbadmin Step 8 - Adding multiple users: postgres , sudo , wikiuser and zabbix to the new security group # adding users to \"dbadmin\" security group one by one usermod -aG dbadmin <username> Steps 9, 10 - Changing the directory's security group , ownership and permissions chown -R root:dbadmin <mount point> sudo chmod -R 0770 <mount point> chown -R root:dbadmin /opt chmod -R 0770 /opt # Verify the group, ownership and permissions change ls -ld <mount point> /opt ls -ld /opt Step 11 - Stopping the PostgreSQL service systemctl stop postgresql Step 12 - Creating a backup archive of the main PostgreSQL directory tar -czvf /tmp/postgres_initial_main_backup_$(date +%Y%m%d%H%M%S).tar.gz -C /var/lib/postgresql/14/ main Step 13- Skipping Step 14 - Copying (with -a flag) the current main database directory to the mount point cp -a /var/lib/postgresql/ /path/to/mount/point/ Step 15 - Deleting the old main Postresql directory rm -rf /var/lib/postgresql/14/main Step 16, 17 - Configuring the data_directory and listen_addresses in /etc/postgresql/14/main/postgresql.conf data_directory = '/opt/<mount_point>/postgresql/14/main' listen_addresses = '*' Step 18 - Adding permissions to pg_hba.conf ~/MediaWiki-Doc-Management-Service/etc/postgresql/14/main/pg_hba.conf for connecting to the PostgreSQL (perform only on the MediaWiki db) host my_wiki wikiuser <Nat IP address VM-1>/32 scram-sha-256 host my_wiki wikiuser <Nat IP address VM-3>/32 scram-sha-256 host my_wiki wikiuser <Nat IP address VM-4>/32 scram-sha-256 host my_wiki wikiuser <Nat IP address VM-5>/32 scram-sha-256 host my_wiki wikiuser <Nat IP address VM-6>/32 scram-sha-256 host my_wiki wikiuser <Nat IP address VM-7>/32 scram-sha-256 # Internal IP address host my_wiki wikiuser 192.168.10.12/32 scram-sha-256 host my_wiki wikiuser 192.168.10.13/32 scram-sha-256 host my_wiki wikiuser 192.168.10.14/32 scram-sha-256 host my_wiki wikiuser 192.168.10.15/32 scram-sha-256 host my_wiki wikiuser 192.168.10.16/32 scram-sha-256 host my_wiki wikiuser 192.168.10.17/32 scram-sha-256 host replication syncuser <Nat IP address VM-6>/32 scram-sha-256 host replication syncuser <Nat IP address VM-7>/32 scram-sha-256 # Internal IP address host replication syncuser 192.168.10.16/32 scram-sha-256 host replication syncuser 192.168.10.17/32 scram-sha-256 Step 19 - Restarting the PostgreSQL service systemctl restart postgresql Step 20 - Creating the /scripts directory with '0755' permissions # Owner: rwx (read, write, and execute) # Group: r-x (read and execute) # Others: r-x (read and execute) mkdir /scripts chmod 0755 /scripts Step 21 - Creating the .env file in /scripts directory with '0740' permissions # Owner: rwx (read, write, and execute) # Group: r-- (read only) # Others: --- (no access) touch /scripts/.env chmod 0740 /scripts/.env Step 22 - Copying the pgdump_standby_postgresql.py script to ~/scripts with '0755' permissions (perform only on the MediaWiki db's) Step 23 - Filling the .env file in ``/scripts'' directory with data BACKUPS_DIR=\"/opt/vhdd-3-dump-db\" DATABASE_USER=wikiuser DATABASE_PASSWORD=some_strong_wikiuser_password DATABASE_NAME=my_wiki DATABASE_PORT=5432 REMOTE_HOST=192.168.10.16 # the ip address of Primary PostgreSQL REMOTE_USER=root PRIVATE_KEY_PATH=~/.ssh/id_ed25519 Step 24 - Copying Private ssh-key to ~/.ssh with '600' permissions (perform only on the MediaWiki db's) Step 25 - Copying the logrotate_pgdump_standby_posgresql file to /etc/logrotate.d/ (perform only on the MediaWiki db's) Step 26 - Starting and enabling the logrotate service (perform only on the MediaWiki db's) systemctl start logrotate systemctl enable logrotate Primary Postgresql Setup Target VM: VM-6 vm-6-primary-db Ansible Tasks: # Step 1 - Adding secret variables # Step 2 - Stopping the PostgreSQL service # Step 3 - Configuring the ``wal_level`` in ``/etc/postgresql/14/main/postgresql.conf`` - Primary Postgresql # Step 4 - Restarting the PostgreSQL service # Step 5 - Creating the \"wikiuser\" user for the Primary PostgreSQL # Step 6 - Creating the \"syncuser\" user for the Primary PostgreSQL # Step 7 - Checking if the database exists (and creating it if it doesn't) Running playbook: ansible-playbook playbook.yaml \\ --vault-id ansible_secrets@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt \\ -i inventory.yaml --tags=\"primary_postgresql_setup\" Manual Step 1 - Skipping Step 2 - Stopping the PostgreSQL service systemctl stop postgresql Step 3 - Configuring the wal_level in /etc/postgresql/14/main/postgresql.conf wal_level = replica Step 4 - Restarting the PostgreSQL service systemctl restart postgresql Step 5 - Creating the \" wikiuser \" user for the Primary PostgreSQL sudo -u postgres psql CREATE USER wikiuser WITH PASSWORD 'wikiuser_password' SUPERUSER CREATEDB CREATEROLE LOGIN INHERIT; \\q Step 6 - Creating the \" syncuser \" user for the Primary PostgreSQL sudo -u postgres psql CREATE USER syncuser WITH PASSWORD 'syncuser_password' REPLICATION; \\q Step 7 - Checking if the database exists (and creating it if it doesn't) sudo -u postgres psql # Checking if the database exists \\l CREATE DATABASE my_wiki WITH OWNER = wikiuser; \\q Standby Postgresql Setup Target VM: VM-7 vm-7-standby-db Ansible Tasks: # Step 1 - Adding secret variables # Step 2 - Creating dynamic variables # Step 3 - Stopping the PostgreSQL service # Step 4 - Configuring the hot_standby in /etc/postgresql/14/main/postgresql.conf # Step 5 - Deleting all contents inside the PostgreSQL Replication directory # Step 6 - Restarting the PostgreSQL service # Step 7 - Starting pg_basebackup for replication # Step 8 - Adding the execution of pgdump_standby_postgresql.py to the cron job scheduler Running playbook: ansible-playbook playbook.yaml \\ --vault-id ansible_secrets@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt \\ --vault-id private_ssh_key@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_private_ssh_key.txt \\ -i inventory.yaml --tags=\"standby_postgresql_setup\" Manual Step 1, 2 - Skipping Step 3 - Stopping the PostgreSQL service systemctl stop postgresql Step 4 - Configuring the hot_standby in /etc/postgresql/14/main/postgresql.conf hot_standby = on Step 5 - Deleting all contents inside the PostgreSQL Replication directory - /opt/vhdd-3-dump-db/postgresql/14/main rm -rf /opt/vhdd-3-dump-db/postgresql/14/main Step 6 - Restarting the PostgreSQL service systemctl restart postgresql Step 7 - Starting pg_basebackup for replication # - h MAIN_IP \u2014 the address of the Primary PostgreSQL # - D \u2014 the folder where the backup should be placed # - U \u2014 the user for connection # - P \u2014 prompts for password input # - v \u2014 outputs a detailed log of the command execution # - R \u2014 creates a standby.signal file in the database folder. This is a marker for the PostgreSQL server to start in standby mode sudo -u postgres pg_basebackup -h 192.168.10.16 -D /opt/vhdd-3-dump-db/postgresql/14/main \\ -U syncuser -P -v -R Step 8 - Adding the execution of pgdump_standby_postgresql.py to the cron job scheduler # minute: '0' - run at the beginning of the hour # # hour: '*/4' - run every 4 hours\" crontab -e 0 */4 * * * /usr/bin/python3 /scripts/pgdump_standby_postgresql.py >> /scripts/pgdump_standby_postgresql.log 2>&1 Zabbix-server Postgresql Setup Target VM: VM-1 vm-1-monitoring-system Ansible Tasks: # Step 1 - Adding secret variables # Step 2 - Creating dynamic variables # Step 3 - Stopping the PostgreSQL service # Step 4 - Creating the /zabbix_dump directory, where db_dumps will be stored with '0755' permissions # Step 5 - Adding permissions to pg_hba.conf for connecting to the Zabbix-Server Postgresql # Step 6 - Restarting the PostgreSQL service # Step 7 - Creating the \"zabbix\" user for the Zabbix-Server Postgresql # Step 8 - Checking if the database exists (and creating it if it doesn't) # Step 9 - Copying the pgdump_zabbix_server.py script to ~/scripts with '0755' permissions # Step 10 - Filling the .env file with data # Step 11 - Copying the logrotate_pgdump_zabbix_server file to /etc/logrotate.d/ # Step 12 - Starting and enabling the logrotate service # Step 13 - Adding the execution of pgdump_zabbix_server.py to the cron job scheduler Running playbook: ansible-playbook playbook.yaml \\ --vault-id ansible_secrets@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt \\ -i inventory.yaml --tags=\"zabbix_server_postgresql_setup\" Manual Step 1, 2 - Skipping Step 3 - Stopping the PostgreSQL service systemctl stop postgresql Step 4 - Creating the /zabbix_dump directory, where db_dumps will be stored with '0755' permissions mkdir /opt/vhdd-1-monitoring-system-db/zabbix_dump chmod 0755 /opt/vhdd-1-monitoring-system-db/zabbix_dump Step 5 - Adding permissions to pg_hba.conf for connecting to the Standby PostgreSQL host zabbix zabbix 77.137.79.100/32 scram-sha-256 host zabbix zabbix 212.179.174.196/32 scram-sha-256 host zabbix zabbix 5.29.11.237/32 scram-sha-256 # NAT IP address host zabbix zabbix <Nat IP address VM-1>/32 scram-sha-256 # Internal IP address host zabbix zabbix 192.168.10.12/32 scram-sha-256 Step 6 - Restarting the PostgreSQL service systemctl restart postgresql Step 7 - Creating the \" zabbix \" user for the Zabbix-Server Postgresql sudo -u postgres psql CREATE USER zabbix WITH PASSWORD 'zabbixuser_password' SUPERUSER CREATEDB CREATEROLE LOGIN INHERIT; \\q Step 8 - Checking if the database exists (and creating it if it doesn't) sudo -u postgres psql # Checking if the database exists \\l CREATE DATABASE zabbix WITH OWNER = zabbix; \\q Step 9 - Copying the pgdump_zabbix_server.py script to ~/scripts with '0755' permissions Step 10 - Filling the .env file with data BACKUPS_DIR=\"/opt/vhdd-1-monitoring-system-db/zabbix_dump\" DATABASE_USER=zabbix DATABASE_PASSWORD=some_strong_zabbix_password # (ansible_secrets.yaml postgres_zabbix_server_user_vars.db_user_password) DATABASE_NAME=zabbix DATABASE_PORT=5432 Step 11 - Copying the logrotate_pgdump_zabbix_server file to /etc/logrotate.d/ Step 12 - Starting and enabling the logrotate service systemctl start logrotate systemctl enable logrotate Step 13 - Adding the execution of pgdump_zabbix_server.py to the cron job scheduler # minute: '0' - run at the beginning of the hour # # hour: '*/4' - run every 4 hours\" crontab -e 0 */4 * * * /usr/bin/python3 /scripts/pgdump_zabbix_server.py >> /scripts/pgdump_zabbix_server.log 2>&1 DDNS DUC Setup (noip.com) Target VM: VM-1 vm-1-monitoring-system and VM-2 vm-2-nginx-proxy-server Ansible Tasks: # Step 1 - Copying the noip-duc_3.3.0.tar.gz archive to root/ # Step 2 - Unzipping the noip-duc.tar.gz archive to root/ # Step 3 - Removing the noip-duc.tar.gz archive from root/ # Step 4 - Installing noip-duc_3.3.0_amd64.deb package # Step 5 - Copying noip-duc service file to /etc/systemd/system/noip-duc.service # Step 6 - Copying dduc_zabbix_server credential file to /etc/default/noip-ducs # Step 7 - Copying duc_nginx_mediawiki credential file to /etc/default/noip-ducs # Step 8 - Reloading systemd daemon # Step 9 - Starting and enabling the noip-duc services Running playbook: ansible-playbook playbook.yaml \\ --vault-id duc_zabbix_server@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_duc_zabbix_server.txt \\ --vault-id duc_nginx_mediawiki@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_duc_nginx_mediawiki.txt \\ -i inventory.yaml --tags=\"ddns_duc_setup\" Manual Step 1 - Copying the noip-duc_3.3.0.tar.gz archive to root/ (and rename to noip-duc.tar.gz) Step 2 Unzipping the noip-duc.tar.gz archive to root/ cd /root tar -xzvf noip-duc.tar.gz /root/ Step 3 - Removing the noip-duc.tar.gz archive from /root/noip-duc.tar.gz rm /root/noip-duc.tar.gz Step 4 - Installing noip-duc_3.3.0_amd64.deb package cd /root/noip-duc/binaries/ # The -i option tells dpkg to install the specified .deb file. dpkg -i noip-duc_3.3.0_amd64.deb Step 5 - Copying noip-duc service file to /etc/systemd/system/noip-duc.service cp /root/noip-duc/debian/service /etc/systemd/system/noip-duc.service Step 6, 7 - Copying dduc_zabbix_server and duc_nginx_mediawiki credentials file to /etc/default/noip-ducs Step 8 - Reloading systemd daemon systemctl daemon-reload Step 9 - Starting and enabling the noip-duc services systemctl start noip-duc systemctl enable noip-duc MediaWiki Setup Target VM: VM-3 vm-3-mediawiki-server-1 and VM-4 vm-4-mediawiki-server-2 Ansible Tasks: # Step 1 - Update list of packages # Step 2 - Apt packages installing # Step 3 - Starting and enabling the nginx services # Step 4 - Starting and enabling the postgresql service # Step 5 - Removing the \"default\" symlink from /etc/nginx/sites-enabled/default # Step 6 - Copying the nginx_mediawiki configuration file to /etc/nginx/sites-available/ with '0755' permissions # Step 7 - Symlink creation for nginx_mediawiki configuration file from /etc/nginx/sites-available/nginx_mediawiki to /etc/nginx/sites-enabled/nginx_mediawiki # Step 8 - Downloading the MediaWiki archive to /var/www/ # Step 9 - Unzipping the MediaWiki archive to /var/www/ # Step 10 - Removing MediaWiki archive from /var/www/mediawiki.tar.gz # Step 11 - Copying the LocalSettings.php file to /var/www/mediawiki/LocalSettings.php with '0755' permissions # Step 12 - Restarting the Nginx service Running playbook: ansible-playbook playbook.yaml --vault-id mediawiki_localsettings@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_mediawiki_localsettings.txt \\ -i inventory.yaml --tags=\"mediawiki_setup\" Manual Steps 1, 2 - Upgrage apt, install apt packages Show apt packages to install --- # vars file for mediawiki apt_packages_to_install: - nginx - php - php-intl - php-mbstring - php-xml - php-apcu - php-curl - php8.1-fpm - php8.1-pgsql - postgresql - postgresql-contrib - python3-psycopg2 - acl - rsync - python3 - python3-venv - python3-pip pip3_packages_to_install: - pip>=24.3.1 - python-dotenv mediawiki_server: mediawiki_parent_path: /var/www/ mediawiki_folder_name: mediawiki mediawiki_archive_name: mediawiki.tar.gz mediawiki_local_settings_file_name: LocalSettings.php mediawiki_download_link: https://releases.wikimedia.org/mediawiki/1.42/mediawiki-1.42.3.tar.gz nginx_conf_name: nginx_mediawiki server_2: private_key_ssh_path: /root/.ssh/id_ed25519 remote_rsync_script_name: remote_rsync_mediawiki.py Step 3 - Starting and Enabling nginx service systemctl start nginx systemctl enable nginx # Check nginx services status systemctl status nginx systemctl is-enabled nginx Step 4 - Starting and Enabling postgresql service systemctl start postgresql systemctl enable postgresql # Check postgresql services status systemctl status postgresql systemctl is-enabled postgresql Step 5 - Removing the \" default \" symlink from /etc/nginx/sites-enabled/default rm /etc/nginx/sites-enabled/default Step 6 - Copying the nginx_mediawiki configuration file to /etc/nginx/sites-available/nginx_mediawiki with '0755' permissions # Owner: rwx (read, write, and execute) # Group: r-x (read and execute) # Others: r-x (read and execute) chmod 0755 /etc/nginx/sites-available/nginx_mediawiki Step 7 - Symlink creation for nginx_mediawiki configuration file from /etc/nginx/sites-available/nginx_mediawiki to /etc/nginx/sites-enabled/nginx_mediawiki ln -s ../sites-available/nginx_mediawiki /etc/nginx/sites-enabled/nginx_mediawiki Step 8 - Downloading the MediaWiki archive to /var/www/ cd /var/www/ # -O mediawiki.tar.gz: This option specifies the output filename for the downloaded file wget -O mediawiki.tar.gz https://releases.wikimedia.org/mediawiki/1.42/mediawiki-1.42.3.tar.gz Step 9 - Unzipping the MediaWiki archive to /var/www/ cd /var/www/ tar -xzvf mediawiki.tar.gz -C /var/www/ Step 10 - Removing MediaWiki archive from /var/www/mediawiki.tar.gz rm /var/www/mediawiki.tar.gz Step 11 - Copying the LocalSettings.php configuration file to /var/www/mediawiki/ with '0755' permissions # Owner: rwx (read, write, and execute) # Group: r-x (read and execute) # Others: r-x (read and execute) chmod 0755 /var/www/mediawiki/LocalSettings.php Step 12 - Restarting the Nginx service systemctl restart nginx Nginx Proxy Server Setup (load balancing between MediaWiki servers) Target VM: VM-2 vm-2-nginx-proxy-server Ansible Tasks: # Step 1 - Update list of packages # Step 2 - Apt packages installing # Step 3 - Starting and enabling the nginx services # Step 4 - Removing the \"default\" symlink from /etc/nginx/sites-enabled/default # Step 5 - Copying the nginx_mediawiki_proxy configuration file to /etc/nginx/sites-available/ with '0755' permissions # Step 6 - Symlink creation for nginx_mediawiki_proxy configuration file # from /etc/nginx/sites-available/nginx_mediawiki_proxy # to /etc/nginx/sites-enabled/nginx_mediawiki_proxy # Step 7 - Copying nginx.conf (with additional logs settings) to /etc/nginx/ # Step 8 - Restarting the Nginx service Running playbook: ansible-playbook playbook.yaml \\ -i inventory.yaml --tags=\"nginx_proxy_mediawiki_setup\" Manual Steps 1, 2 - Upgrage apt, install apt packages Show apt packages to install --- # vars file for nginx_mediawiki_proxy apt_packages_to_install: - nginx Step 3 - Starting and Enabling nginx service systemctl start nginx systemctl enable nginx # Check nginx service status systemctl status nginx systemctl is-enabled nginx Step 4 - Removing the \" default \" symlink from /etc/nginx/sites-enabled/default rm /etc/nginx/sites-enabled/default Step 5 - Copying the nginx_mediawiki_proxy configuration file to /etc/nginx/sites-available/ with '0755' permissions # Owner: rwx (read, write, and execute) # Group: r-x (read and execute) # Others: r-x (read and execute) chmod 0755 /etc/nginx/sites-available/nginx_mediawiki_proxy Step 6 - Symlink creation for nginx_mediawiki_proxy configuration file from /etc/nginx/sites-available/nginx_mediawiki_proxy to /etc/nginx/sites-enabled/nginx_mediawiki_proxy ln -s ../sites-available/nginx_mediawiki_proxy /etc/nginx/sites-enabled/nginx_mediawiki_proxy Step 7 - Restarting the Nginx service systemctl restart nginx Zabbix-Server Setup Target VM: VM-1 vm-1-monitoring-system Ansible Tasks: # Step 1 - Adding secret variables # Step 2 - Downloading the Zabbix repository # Step 3 - Installing Zabbix repository # Step 4 - Update list of packages # Step 5 - Apt packages installing # Step 6 - Importing initial schema for Zabbix server # Step 7 - Configuring the \"DBPassword\" in /etc/zabbix/zabbix_server.conf # Step 8 - Configuring the \"listen\" in /etc/zabbix/nginx.conf # Step 9 - Configuring the \"server_name\" in /etc/zabbix/nginx.conf # Step 10 - Restart and enable packages Running playbook: ansible-playbook playbook.yaml \\ --vault-id ansible_secrets@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt \\ -i inventory.yaml --tags=\"zabbix_server_setup\" Manual Steps 1 - Skipping Step 2 - Downloading the Zabbix repository cd /tmp wget https://repo.zabbix.com/zabbix/7.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest+ubuntu22.04_all.deb -O /tmp/zabbix_all.deb Step 3 - Installing Zabbix repository dpkg -i zabbix_all.deb Step 4, 5 - Update list of packages, install apt packages Show apt packages to install --- # vars file for zabbix_server_monitoring_system apt_packages_to_install: - zabbix-server-pgsql - zabbix-frontend-php - php8.1-pgsql - zabbix-nginx-conf - zabbix-sql-scripts - zabbix-agent packages_to_restart: - zabbix-server - zabbix-agent - nginx - php8.1-fpm Step 6 - Importing initial schema for Zabbix server # You will be prompted to enter your zabbix-user password (stored in ansible_secrets.yaml postgres_zabbix_server_user_vars.db_user_password) zcat /usr/share/zabbix-sql-scripts/postgresql/server.sql.gz | sudo -u zabbix psql zabbix Step 7 - Configuring the \" DBPassword \" in /etc/zabbix/zabbix_server.conf nano /etc/zabbix/zabbix_server.conf DBPassword=some_strong_zabbix_password (ansible_secrets.yaml postgres_zabbix_server_user_vars.db_user_password) Step 8, 9 - Configuring the \" listen \" and \" server_name \" in /etc/zabbix/nginx.conf nano /etc/zabbix/nginx.conf listen 8080 # IP or DDNS address server_name monitoring-wiki.ddns.net Step 10 - Restarting and Enabling services systemctl start <service_name> systemctl enable <service_name> # Check services status systemctl status <service_name> systemctl is-enabled <service_name> Show apt packages to restart and enable --- # vars file for zabbix_server_monitoring_system apt_packages_to_install: - zabbix-server-pgsql - zabbix-frontend-php - php8.1-pgsql - zabbix-nginx-conf - zabbix-sql-scripts - zabbix-agent packages_to_restart: - zabbix-server - zabbix-agent - nginx - php8.1-fpm Zabbix-Agent Setup Target VM: All( VM-1 vm-1-monitoring-system , VM-2 vm-2-nginx-proxy-server , VM-3 vm-3-mediawiki-server-1 , VM-4 vm-4-mediawiki-server-2 , VM-5 vm-5-haproxy-proxy-server , VM-6 vm-6-primary-db , VM-7 vm-7-standby-db ) Ansible Tasks: # Step 1 - Downloading the Zabbix repository # Step 2 - Installing the Zabbix repository # Step 3 - Updating the apt repository # Step 4 - Install packages # Step 5 - Configuring the \"Server\" in /etc/zabbix/zabbix_agentd.conf # Step 6 - Configuring the \"ServerActive\" in /etc/zabbix/zabbix_agentd.conf # Step 7 - Configuring the \"Hostname\" in /etc/zabbix/zabbix_agentd.conf # Step 8 - Restarting and enabling packages Running playbook: ansible-playbook playbook.yaml \\ -i inventory.yaml --tags=\"zabbix_agent_setup\" Manual Step 1 - Downloading the Zabbix repository cd /tmp wget https://repo.zabbix.com/zabbix/7.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest+ubuntu22.04_all.deb -O /tmp/zabbix_all.deb Step 2 - Installing Zabbix repository dpkg -i zabbix_all.deb Step 3, 4 - Update list of packages, install apt packages Show apt packages to install --- # vars file for zabbix_agent_monitoring_system apt_packages_to_install: - zabbix-agent packages_to_restart: - zabbix-agent Step 5, 6, 7 - Configuring the Server, ServerActive, Hostname in /etc/zabbix/zabbix_agentd.conf Server=192.168.10.12 ServerActive=192.168.10.12 Hostname=<current_host_name> Step 8 - Restarting and Enabling services systemctl start <service_name> systemctl enable <service_name> # Check services status systemctl status <service_name> systemctl is-enabled <service_name> Show apt packages to restart and enable --- # vars file for zabbix_agent_monitoring_system apt_packages_to_install: - zabbix-agent packages_to_restart: - zabbix-agent","title":"7. Run the Ansible pipeline"},{"location":"7.1.%20ansible_pipeline/#ansible-pipeline","text":"","title":"Ansible pipeline"},{"location":"7.1.%20ansible_pipeline/#changing-the-hostnames-of-all-vms","text":"","title":"Changing the hostnames of all VMs"},{"location":"7.1.%20ansible_pipeline/#ansible","text":"Compare the current VM hostname with inventory.yaml ~/MediaWiki-Doc-Management-Service/Ansible/inventory.yaml and change it if it differs. ansible-playbook playbook.yaml -i inventory.yaml --tags=\"change_vms_hostname\"","title":"Ansible"},{"location":"7.1.%20ansible_pipeline/#manual","text":"# Check the current VM hostname hostnamectl # Set a New Hostname hostnamectl set-hostname new-hostname","title":"Manual"},{"location":"7.1.%20ansible_pipeline/#mounting-external-hard-drives-and-initializing-lvm","text":"","title":"Mounting external hard drives and initializing LVM"},{"location":"7.1.%20ansible_pipeline/#ansible_1","text":"Creating a disk partition , physical volume , volume group , logical volume , and a mount point in /opt directory Create an entry in /etc/fstab to automount the disk after a VM restart ansible-playbook playbook.yaml -i inventory.yaml --tags=\"mount_external_hard_drives\"","title":"Ansible"},{"location":"7.1.%20ansible_pipeline/#manual_1","text":"Display information about disks and partitions lsblk -f Partitioning the disk with new partitions # Example: fdisk /dev/vdb fdisk /dev/<device_name> # The \"fdisk\" console opens - g \u2014 create a GPT partition table - n \u2014 create a disk partition > > specify the partition number (usually 1) > > press Enter (when prompted about sectors) - w \u2014 save changes and exit Initializing the Physical Volume # Display information about disks and partitions lsblk -f # Create PV # Example: pvcreate /dev/vdb1 pvcreate /dev/<partition_name> Creating a Volume Group # Create VG # Example: vgcreate vg-db-storage /dev/vdb1 vgcreate <volume_group_name> /dev/<partition_name> # Check that the VG is created vgs Creating a Logical Volume # Check the number of physical extents vgdisplay # Create LV # Example: lvcreate -n lv-db -l 5119 vg-db-storage lvcreate -n <LV_name> -l <number of extents> <VG_name> # Check that the LV is created lvs Formatting the LV and creating an ext4 file system # Example: mkfs.ext4 /dev/vg-db-storage/lv-db mkfs.ext4 /dev/<VG_name>/<LV_name> Creating a Mount Point # Example: mkdir /opt/db_mount/ mkdir /opt/<directory_name>/ Mounting the LV # Example: mount /dev/vg-db-storage/lv-db /opt/db_mount/ mount /dev/<VG_name>/<LV_name> <mount_point> Create an entry in /etc/fstab to automount the disk after a VM restart # Example: echo \"/dev/vg-db-storage/lv-db /opt/db_mount/ ext4 defaults 0 0\" | sudo tee -a /etc/fstab echo \"/dev/<VG_name>/<LV_name> ext4 defaults 0 0\" | sudo tee -a /etc/fstab # Check automount cat /etc/fstab or mount -a","title":"Manual"},{"location":"7.1.%20ansible_pipeline/#unmounting-external-hard-drives-and-deinitializing-lvm-optional","text":"","title":"Unmounting external hard drives and deinitializing LVM (Optional)"},{"location":"7.1.%20ansible_pipeline/#ansible_2","text":"Deleting a disk partition , physical volume , volume group , logical volume , and unmount a mount point in /opt directory ansible-playbook playbook.yaml -i inventory.yaml --tags=\"unmount_external_hard_drives\"","title":"Ansible"},{"location":"7.1.%20ansible_pipeline/#manual_2","text":"Display information about disks and partitions lsblk -f Unmounting the LV # Example: umount /opt/db_mount/ umount <path_to_mount_point> Removing a Logical Volume # Display information about LV lvdisplay # Remove LV # Example: lvremove /dev/vg-db-storage/lv-db lvremove /dev/<VG_name>/<LV_name> Removing a Volume Group # Display information about VG vgdisplay # Remove VG # Example: vgremove /dev/vg-db-storage vgremove /dev/<VG_name> Removing a Partition and Physical Volume # Display information about Partition fdisk -l or sblk -f # Example: fdisk /dev/vdb fdisk /dev/<device_name> # The \"fdisk\" console opens - g \u2014 display current partitions - d \u2014 remove a disk partition > > specify the partition number (usually 1) - w \u2014 save changes and exit","title":"Manual"},{"location":"7.1.%20ansible_pipeline/#postgresql-common-setup","text":"Target VMs: VM-1 vm-1-monitoring-system VM-6 vm-6-primary-db , VM-7 vm-7-standby-db","title":"Postgresql Common Setup"},{"location":"7.1.%20ansible_pipeline/#ansible_3","text":"Tasks: # Step 1 - Update list of packages # Step 2 - Apt packages installing # Step 3 - Pip3 packages installing # Step 4 - Starting and enabling the postgresql service # Step 5 - Adding secret variables # Step 6 - Creating dynamic variables # Step 7 - Creating a \"dbadmin\" security group # Step 8 - Adding multiple users to \"dbadmin\" group # Step 9 - Changing group ownership for PostgreSQL directories # Step 10 - Setting permissions for PostgreSQL directories # Step 11 - Stopping the PostgreSQL service # Step 12 - Creating a backup archive of the main PostgreSQL directory # Step 13 - Checking for the presence of a mount point # Step 14 - Copying (with -a flag) the current main database directory to the mount point # Step 15 - Deleting the old main Postresql directory # Step 16 - Configuring the data_directory in /etc/postgresql/14/main/postgresql.conf # Step 17 - Configuring the listen_addresses in /etc/postgresql/14/main/postgresql.conf # Step 18 - Adding permissions to pg_hba.conf for connecting to the PostgreSQL (perform only on the MediaWiki db's) # Step 19 - Restarting the PostgreSQL service # Step 20 - Creating the ``/scripts`` directory with '0755' permissions # Step 21 - Creating the **.env** file in ``/scripts`` directory with '0740' permissions # Step 22 - Copying the **pgdump_standby_postgresql.py** script to ``~/scripts`` with '0755' permissions (perform only on the MediaWiki db's) # Step 23 - Filling the **.env** file in ``/scripts'' directory with data # Step 24 - Copying **Private ssh-key** to ``~/.ssh`` with '600' permissions (perform only on the MediaWiki db's) # Step 25 - Copying the **logrotate_pgdump_standby_posgresql** file to ``/etc/logrotate.d/`` (perform only on the MediaWiki db's) # Step 26 - Starting and enabling the **logrotate service** (perform only on the MediaWiki db's) Running playbook: ansible-playbook playbook.yaml \\ --vault-id ansible_secrets@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt \\ -i inventory.yaml --tags=\"postgresql_common_setup\"","title":"Ansible"},{"location":"7.1.%20ansible_pipeline/#manual_3","text":"Steps 1, 2, 3 - Upgrage apt, install apt packages, install pip3 packages Show apt and pip3 packages to install --- # vars file for db_postgresql apt_packages_to_install: - postgresql - postgresql-contrib - python3-psycopg2 - acl - rsync - python3 - python3-venv - python3-pip pip3_packages_to_install: - pip>=24.3.1 - python-dotenv Step 4 - Enable postgresql services systemctl start postgresql systemctl enable postgresql # Check postgresql services status systemctl status postgresql systemctl is-enabled postgresql Steps 5, 6 - Skipping Step 7 - Creating security group - dbadmin groupadd dbadmin # verify the group getent group dbadmin Step 8 - Adding multiple users: postgres , sudo , wikiuser and zabbix to the new security group # adding users to \"dbadmin\" security group one by one usermod -aG dbadmin <username> Steps 9, 10 - Changing the directory's security group , ownership and permissions chown -R root:dbadmin <mount point> sudo chmod -R 0770 <mount point> chown -R root:dbadmin /opt chmod -R 0770 /opt # Verify the group, ownership and permissions change ls -ld <mount point> /opt ls -ld /opt Step 11 - Stopping the PostgreSQL service systemctl stop postgresql Step 12 - Creating a backup archive of the main PostgreSQL directory tar -czvf /tmp/postgres_initial_main_backup_$(date +%Y%m%d%H%M%S).tar.gz -C /var/lib/postgresql/14/ main Step 13- Skipping Step 14 - Copying (with -a flag) the current main database directory to the mount point cp -a /var/lib/postgresql/ /path/to/mount/point/ Step 15 - Deleting the old main Postresql directory rm -rf /var/lib/postgresql/14/main Step 16, 17 - Configuring the data_directory and listen_addresses in /etc/postgresql/14/main/postgresql.conf data_directory = '/opt/<mount_point>/postgresql/14/main' listen_addresses = '*' Step 18 - Adding permissions to pg_hba.conf ~/MediaWiki-Doc-Management-Service/etc/postgresql/14/main/pg_hba.conf for connecting to the PostgreSQL (perform only on the MediaWiki db) host my_wiki wikiuser <Nat IP address VM-1>/32 scram-sha-256 host my_wiki wikiuser <Nat IP address VM-3>/32 scram-sha-256 host my_wiki wikiuser <Nat IP address VM-4>/32 scram-sha-256 host my_wiki wikiuser <Nat IP address VM-5>/32 scram-sha-256 host my_wiki wikiuser <Nat IP address VM-6>/32 scram-sha-256 host my_wiki wikiuser <Nat IP address VM-7>/32 scram-sha-256 # Internal IP address host my_wiki wikiuser 192.168.10.12/32 scram-sha-256 host my_wiki wikiuser 192.168.10.13/32 scram-sha-256 host my_wiki wikiuser 192.168.10.14/32 scram-sha-256 host my_wiki wikiuser 192.168.10.15/32 scram-sha-256 host my_wiki wikiuser 192.168.10.16/32 scram-sha-256 host my_wiki wikiuser 192.168.10.17/32 scram-sha-256 host replication syncuser <Nat IP address VM-6>/32 scram-sha-256 host replication syncuser <Nat IP address VM-7>/32 scram-sha-256 # Internal IP address host replication syncuser 192.168.10.16/32 scram-sha-256 host replication syncuser 192.168.10.17/32 scram-sha-256 Step 19 - Restarting the PostgreSQL service systemctl restart postgresql Step 20 - Creating the /scripts directory with '0755' permissions # Owner: rwx (read, write, and execute) # Group: r-x (read and execute) # Others: r-x (read and execute) mkdir /scripts chmod 0755 /scripts Step 21 - Creating the .env file in /scripts directory with '0740' permissions # Owner: rwx (read, write, and execute) # Group: r-- (read only) # Others: --- (no access) touch /scripts/.env chmod 0740 /scripts/.env Step 22 - Copying the pgdump_standby_postgresql.py script to ~/scripts with '0755' permissions (perform only on the MediaWiki db's) Step 23 - Filling the .env file in ``/scripts'' directory with data BACKUPS_DIR=\"/opt/vhdd-3-dump-db\" DATABASE_USER=wikiuser DATABASE_PASSWORD=some_strong_wikiuser_password DATABASE_NAME=my_wiki DATABASE_PORT=5432 REMOTE_HOST=192.168.10.16 # the ip address of Primary PostgreSQL REMOTE_USER=root PRIVATE_KEY_PATH=~/.ssh/id_ed25519 Step 24 - Copying Private ssh-key to ~/.ssh with '600' permissions (perform only on the MediaWiki db's) Step 25 - Copying the logrotate_pgdump_standby_posgresql file to /etc/logrotate.d/ (perform only on the MediaWiki db's) Step 26 - Starting and enabling the logrotate service (perform only on the MediaWiki db's) systemctl start logrotate systemctl enable logrotate","title":"Manual"},{"location":"7.1.%20ansible_pipeline/#primary-postgresql-setup","text":"Target VM: VM-6 vm-6-primary-db","title":"Primary Postgresql Setup"},{"location":"7.1.%20ansible_pipeline/#ansible_4","text":"Tasks: # Step 1 - Adding secret variables # Step 2 - Stopping the PostgreSQL service # Step 3 - Configuring the ``wal_level`` in ``/etc/postgresql/14/main/postgresql.conf`` - Primary Postgresql # Step 4 - Restarting the PostgreSQL service # Step 5 - Creating the \"wikiuser\" user for the Primary PostgreSQL # Step 6 - Creating the \"syncuser\" user for the Primary PostgreSQL # Step 7 - Checking if the database exists (and creating it if it doesn't) Running playbook: ansible-playbook playbook.yaml \\ --vault-id ansible_secrets@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt \\ -i inventory.yaml --tags=\"primary_postgresql_setup\"","title":"Ansible"},{"location":"7.1.%20ansible_pipeline/#manual_4","text":"Step 1 - Skipping Step 2 - Stopping the PostgreSQL service systemctl stop postgresql Step 3 - Configuring the wal_level in /etc/postgresql/14/main/postgresql.conf wal_level = replica Step 4 - Restarting the PostgreSQL service systemctl restart postgresql Step 5 - Creating the \" wikiuser \" user for the Primary PostgreSQL sudo -u postgres psql CREATE USER wikiuser WITH PASSWORD 'wikiuser_password' SUPERUSER CREATEDB CREATEROLE LOGIN INHERIT; \\q Step 6 - Creating the \" syncuser \" user for the Primary PostgreSQL sudo -u postgres psql CREATE USER syncuser WITH PASSWORD 'syncuser_password' REPLICATION; \\q Step 7 - Checking if the database exists (and creating it if it doesn't) sudo -u postgres psql # Checking if the database exists \\l CREATE DATABASE my_wiki WITH OWNER = wikiuser; \\q","title":"Manual"},{"location":"7.1.%20ansible_pipeline/#standby-postgresql-setup","text":"Target VM: VM-7 vm-7-standby-db","title":"Standby Postgresql Setup"},{"location":"7.1.%20ansible_pipeline/#ansible_5","text":"Tasks: # Step 1 - Adding secret variables # Step 2 - Creating dynamic variables # Step 3 - Stopping the PostgreSQL service # Step 4 - Configuring the hot_standby in /etc/postgresql/14/main/postgresql.conf # Step 5 - Deleting all contents inside the PostgreSQL Replication directory # Step 6 - Restarting the PostgreSQL service # Step 7 - Starting pg_basebackup for replication # Step 8 - Adding the execution of pgdump_standby_postgresql.py to the cron job scheduler Running playbook: ansible-playbook playbook.yaml \\ --vault-id ansible_secrets@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt \\ --vault-id private_ssh_key@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_private_ssh_key.txt \\ -i inventory.yaml --tags=\"standby_postgresql_setup\"","title":"Ansible"},{"location":"7.1.%20ansible_pipeline/#manual_5","text":"Step 1, 2 - Skipping Step 3 - Stopping the PostgreSQL service systemctl stop postgresql Step 4 - Configuring the hot_standby in /etc/postgresql/14/main/postgresql.conf hot_standby = on Step 5 - Deleting all contents inside the PostgreSQL Replication directory - /opt/vhdd-3-dump-db/postgresql/14/main rm -rf /opt/vhdd-3-dump-db/postgresql/14/main Step 6 - Restarting the PostgreSQL service systemctl restart postgresql Step 7 - Starting pg_basebackup for replication # - h MAIN_IP \u2014 the address of the Primary PostgreSQL # - D \u2014 the folder where the backup should be placed # - U \u2014 the user for connection # - P \u2014 prompts for password input # - v \u2014 outputs a detailed log of the command execution # - R \u2014 creates a standby.signal file in the database folder. This is a marker for the PostgreSQL server to start in standby mode sudo -u postgres pg_basebackup -h 192.168.10.16 -D /opt/vhdd-3-dump-db/postgresql/14/main \\ -U syncuser -P -v -R Step 8 - Adding the execution of pgdump_standby_postgresql.py to the cron job scheduler # minute: '0' - run at the beginning of the hour # # hour: '*/4' - run every 4 hours\" crontab -e 0 */4 * * * /usr/bin/python3 /scripts/pgdump_standby_postgresql.py >> /scripts/pgdump_standby_postgresql.log 2>&1","title":"Manual"},{"location":"7.1.%20ansible_pipeline/#zabbix-server-postgresql-setup","text":"Target VM: VM-1 vm-1-monitoring-system","title":"Zabbix-server Postgresql Setup"},{"location":"7.1.%20ansible_pipeline/#ansible_6","text":"Tasks: # Step 1 - Adding secret variables # Step 2 - Creating dynamic variables # Step 3 - Stopping the PostgreSQL service # Step 4 - Creating the /zabbix_dump directory, where db_dumps will be stored with '0755' permissions # Step 5 - Adding permissions to pg_hba.conf for connecting to the Zabbix-Server Postgresql # Step 6 - Restarting the PostgreSQL service # Step 7 - Creating the \"zabbix\" user for the Zabbix-Server Postgresql # Step 8 - Checking if the database exists (and creating it if it doesn't) # Step 9 - Copying the pgdump_zabbix_server.py script to ~/scripts with '0755' permissions # Step 10 - Filling the .env file with data # Step 11 - Copying the logrotate_pgdump_zabbix_server file to /etc/logrotate.d/ # Step 12 - Starting and enabling the logrotate service # Step 13 - Adding the execution of pgdump_zabbix_server.py to the cron job scheduler Running playbook: ansible-playbook playbook.yaml \\ --vault-id ansible_secrets@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt \\ -i inventory.yaml --tags=\"zabbix_server_postgresql_setup\"","title":"Ansible"},{"location":"7.1.%20ansible_pipeline/#manual_6","text":"Step 1, 2 - Skipping Step 3 - Stopping the PostgreSQL service systemctl stop postgresql Step 4 - Creating the /zabbix_dump directory, where db_dumps will be stored with '0755' permissions mkdir /opt/vhdd-1-monitoring-system-db/zabbix_dump chmod 0755 /opt/vhdd-1-monitoring-system-db/zabbix_dump Step 5 - Adding permissions to pg_hba.conf for connecting to the Standby PostgreSQL host zabbix zabbix 77.137.79.100/32 scram-sha-256 host zabbix zabbix 212.179.174.196/32 scram-sha-256 host zabbix zabbix 5.29.11.237/32 scram-sha-256 # NAT IP address host zabbix zabbix <Nat IP address VM-1>/32 scram-sha-256 # Internal IP address host zabbix zabbix 192.168.10.12/32 scram-sha-256 Step 6 - Restarting the PostgreSQL service systemctl restart postgresql Step 7 - Creating the \" zabbix \" user for the Zabbix-Server Postgresql sudo -u postgres psql CREATE USER zabbix WITH PASSWORD 'zabbixuser_password' SUPERUSER CREATEDB CREATEROLE LOGIN INHERIT; \\q Step 8 - Checking if the database exists (and creating it if it doesn't) sudo -u postgres psql # Checking if the database exists \\l CREATE DATABASE zabbix WITH OWNER = zabbix; \\q Step 9 - Copying the pgdump_zabbix_server.py script to ~/scripts with '0755' permissions Step 10 - Filling the .env file with data BACKUPS_DIR=\"/opt/vhdd-1-monitoring-system-db/zabbix_dump\" DATABASE_USER=zabbix DATABASE_PASSWORD=some_strong_zabbix_password # (ansible_secrets.yaml postgres_zabbix_server_user_vars.db_user_password) DATABASE_NAME=zabbix DATABASE_PORT=5432 Step 11 - Copying the logrotate_pgdump_zabbix_server file to /etc/logrotate.d/ Step 12 - Starting and enabling the logrotate service systemctl start logrotate systemctl enable logrotate Step 13 - Adding the execution of pgdump_zabbix_server.py to the cron job scheduler # minute: '0' - run at the beginning of the hour # # hour: '*/4' - run every 4 hours\" crontab -e 0 */4 * * * /usr/bin/python3 /scripts/pgdump_zabbix_server.py >> /scripts/pgdump_zabbix_server.log 2>&1","title":"Manual"},{"location":"7.1.%20ansible_pipeline/#ddns-duc-setup-noipcom","text":"Target VM: VM-1 vm-1-monitoring-system and VM-2 vm-2-nginx-proxy-server","title":"DDNS DUC Setup (noip.com)"},{"location":"7.1.%20ansible_pipeline/#ansible_7","text":"Tasks: # Step 1 - Copying the noip-duc_3.3.0.tar.gz archive to root/ # Step 2 - Unzipping the noip-duc.tar.gz archive to root/ # Step 3 - Removing the noip-duc.tar.gz archive from root/ # Step 4 - Installing noip-duc_3.3.0_amd64.deb package # Step 5 - Copying noip-duc service file to /etc/systemd/system/noip-duc.service # Step 6 - Copying dduc_zabbix_server credential file to /etc/default/noip-ducs # Step 7 - Copying duc_nginx_mediawiki credential file to /etc/default/noip-ducs # Step 8 - Reloading systemd daemon # Step 9 - Starting and enabling the noip-duc services Running playbook: ansible-playbook playbook.yaml \\ --vault-id duc_zabbix_server@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_duc_zabbix_server.txt \\ --vault-id duc_nginx_mediawiki@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_duc_nginx_mediawiki.txt \\ -i inventory.yaml --tags=\"ddns_duc_setup\"","title":"Ansible"},{"location":"7.1.%20ansible_pipeline/#manual_7","text":"Step 1 - Copying the noip-duc_3.3.0.tar.gz archive to root/ (and rename to noip-duc.tar.gz) Step 2 Unzipping the noip-duc.tar.gz archive to root/ cd /root tar -xzvf noip-duc.tar.gz /root/ Step 3 - Removing the noip-duc.tar.gz archive from /root/noip-duc.tar.gz rm /root/noip-duc.tar.gz Step 4 - Installing noip-duc_3.3.0_amd64.deb package cd /root/noip-duc/binaries/ # The -i option tells dpkg to install the specified .deb file. dpkg -i noip-duc_3.3.0_amd64.deb Step 5 - Copying noip-duc service file to /etc/systemd/system/noip-duc.service cp /root/noip-duc/debian/service /etc/systemd/system/noip-duc.service Step 6, 7 - Copying dduc_zabbix_server and duc_nginx_mediawiki credentials file to /etc/default/noip-ducs Step 8 - Reloading systemd daemon systemctl daemon-reload Step 9 - Starting and enabling the noip-duc services systemctl start noip-duc systemctl enable noip-duc","title":"Manual"},{"location":"7.1.%20ansible_pipeline/#mediawiki-setup","text":"Target VM: VM-3 vm-3-mediawiki-server-1 and VM-4 vm-4-mediawiki-server-2","title":"MediaWiki Setup"},{"location":"7.1.%20ansible_pipeline/#ansible_8","text":"Tasks: # Step 1 - Update list of packages # Step 2 - Apt packages installing # Step 3 - Starting and enabling the nginx services # Step 4 - Starting and enabling the postgresql service # Step 5 - Removing the \"default\" symlink from /etc/nginx/sites-enabled/default # Step 6 - Copying the nginx_mediawiki configuration file to /etc/nginx/sites-available/ with '0755' permissions # Step 7 - Symlink creation for nginx_mediawiki configuration file from /etc/nginx/sites-available/nginx_mediawiki to /etc/nginx/sites-enabled/nginx_mediawiki # Step 8 - Downloading the MediaWiki archive to /var/www/ # Step 9 - Unzipping the MediaWiki archive to /var/www/ # Step 10 - Removing MediaWiki archive from /var/www/mediawiki.tar.gz # Step 11 - Copying the LocalSettings.php file to /var/www/mediawiki/LocalSettings.php with '0755' permissions # Step 12 - Restarting the Nginx service Running playbook: ansible-playbook playbook.yaml --vault-id mediawiki_localsettings@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_mediawiki_localsettings.txt \\ -i inventory.yaml --tags=\"mediawiki_setup\"","title":"Ansible"},{"location":"7.1.%20ansible_pipeline/#manual_8","text":"Steps 1, 2 - Upgrage apt, install apt packages Show apt packages to install --- # vars file for mediawiki apt_packages_to_install: - nginx - php - php-intl - php-mbstring - php-xml - php-apcu - php-curl - php8.1-fpm - php8.1-pgsql - postgresql - postgresql-contrib - python3-psycopg2 - acl - rsync - python3 - python3-venv - python3-pip pip3_packages_to_install: - pip>=24.3.1 - python-dotenv mediawiki_server: mediawiki_parent_path: /var/www/ mediawiki_folder_name: mediawiki mediawiki_archive_name: mediawiki.tar.gz mediawiki_local_settings_file_name: LocalSettings.php mediawiki_download_link: https://releases.wikimedia.org/mediawiki/1.42/mediawiki-1.42.3.tar.gz nginx_conf_name: nginx_mediawiki server_2: private_key_ssh_path: /root/.ssh/id_ed25519 remote_rsync_script_name: remote_rsync_mediawiki.py Step 3 - Starting and Enabling nginx service systemctl start nginx systemctl enable nginx # Check nginx services status systemctl status nginx systemctl is-enabled nginx Step 4 - Starting and Enabling postgresql service systemctl start postgresql systemctl enable postgresql # Check postgresql services status systemctl status postgresql systemctl is-enabled postgresql Step 5 - Removing the \" default \" symlink from /etc/nginx/sites-enabled/default rm /etc/nginx/sites-enabled/default Step 6 - Copying the nginx_mediawiki configuration file to /etc/nginx/sites-available/nginx_mediawiki with '0755' permissions # Owner: rwx (read, write, and execute) # Group: r-x (read and execute) # Others: r-x (read and execute) chmod 0755 /etc/nginx/sites-available/nginx_mediawiki Step 7 - Symlink creation for nginx_mediawiki configuration file from /etc/nginx/sites-available/nginx_mediawiki to /etc/nginx/sites-enabled/nginx_mediawiki ln -s ../sites-available/nginx_mediawiki /etc/nginx/sites-enabled/nginx_mediawiki Step 8 - Downloading the MediaWiki archive to /var/www/ cd /var/www/ # -O mediawiki.tar.gz: This option specifies the output filename for the downloaded file wget -O mediawiki.tar.gz https://releases.wikimedia.org/mediawiki/1.42/mediawiki-1.42.3.tar.gz Step 9 - Unzipping the MediaWiki archive to /var/www/ cd /var/www/ tar -xzvf mediawiki.tar.gz -C /var/www/ Step 10 - Removing MediaWiki archive from /var/www/mediawiki.tar.gz rm /var/www/mediawiki.tar.gz Step 11 - Copying the LocalSettings.php configuration file to /var/www/mediawiki/ with '0755' permissions # Owner: rwx (read, write, and execute) # Group: r-x (read and execute) # Others: r-x (read and execute) chmod 0755 /var/www/mediawiki/LocalSettings.php Step 12 - Restarting the Nginx service systemctl restart nginx","title":"Manual"},{"location":"7.1.%20ansible_pipeline/#nginx-proxy-server-setup-load-balancing-between-mediawiki-servers","text":"Target VM: VM-2 vm-2-nginx-proxy-server","title":"Nginx Proxy Server Setup (load balancing between MediaWiki servers)"},{"location":"7.1.%20ansible_pipeline/#ansible_9","text":"Tasks: # Step 1 - Update list of packages # Step 2 - Apt packages installing # Step 3 - Starting and enabling the nginx services # Step 4 - Removing the \"default\" symlink from /etc/nginx/sites-enabled/default # Step 5 - Copying the nginx_mediawiki_proxy configuration file to /etc/nginx/sites-available/ with '0755' permissions # Step 6 - Symlink creation for nginx_mediawiki_proxy configuration file # from /etc/nginx/sites-available/nginx_mediawiki_proxy # to /etc/nginx/sites-enabled/nginx_mediawiki_proxy # Step 7 - Copying nginx.conf (with additional logs settings) to /etc/nginx/ # Step 8 - Restarting the Nginx service Running playbook: ansible-playbook playbook.yaml \\ -i inventory.yaml --tags=\"nginx_proxy_mediawiki_setup\"","title":"Ansible"},{"location":"7.1.%20ansible_pipeline/#manual_9","text":"Steps 1, 2 - Upgrage apt, install apt packages Show apt packages to install --- # vars file for nginx_mediawiki_proxy apt_packages_to_install: - nginx Step 3 - Starting and Enabling nginx service systemctl start nginx systemctl enable nginx # Check nginx service status systemctl status nginx systemctl is-enabled nginx Step 4 - Removing the \" default \" symlink from /etc/nginx/sites-enabled/default rm /etc/nginx/sites-enabled/default Step 5 - Copying the nginx_mediawiki_proxy configuration file to /etc/nginx/sites-available/ with '0755' permissions # Owner: rwx (read, write, and execute) # Group: r-x (read and execute) # Others: r-x (read and execute) chmod 0755 /etc/nginx/sites-available/nginx_mediawiki_proxy Step 6 - Symlink creation for nginx_mediawiki_proxy configuration file from /etc/nginx/sites-available/nginx_mediawiki_proxy to /etc/nginx/sites-enabled/nginx_mediawiki_proxy ln -s ../sites-available/nginx_mediawiki_proxy /etc/nginx/sites-enabled/nginx_mediawiki_proxy Step 7 - Restarting the Nginx service systemctl restart nginx","title":"Manual"},{"location":"7.1.%20ansible_pipeline/#zabbix-server-setup","text":"Target VM: VM-1 vm-1-monitoring-system","title":"Zabbix-Server Setup"},{"location":"7.1.%20ansible_pipeline/#ansible_10","text":"Tasks: # Step 1 - Adding secret variables # Step 2 - Downloading the Zabbix repository # Step 3 - Installing Zabbix repository # Step 4 - Update list of packages # Step 5 - Apt packages installing # Step 6 - Importing initial schema for Zabbix server # Step 7 - Configuring the \"DBPassword\" in /etc/zabbix/zabbix_server.conf # Step 8 - Configuring the \"listen\" in /etc/zabbix/nginx.conf # Step 9 - Configuring the \"server_name\" in /etc/zabbix/nginx.conf # Step 10 - Restart and enable packages Running playbook: ansible-playbook playbook.yaml \\ --vault-id ansible_secrets@~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt \\ -i inventory.yaml --tags=\"zabbix_server_setup\"","title":"Ansible"},{"location":"7.1.%20ansible_pipeline/#manual_10","text":"Steps 1 - Skipping Step 2 - Downloading the Zabbix repository cd /tmp wget https://repo.zabbix.com/zabbix/7.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest+ubuntu22.04_all.deb -O /tmp/zabbix_all.deb Step 3 - Installing Zabbix repository dpkg -i zabbix_all.deb Step 4, 5 - Update list of packages, install apt packages Show apt packages to install --- # vars file for zabbix_server_monitoring_system apt_packages_to_install: - zabbix-server-pgsql - zabbix-frontend-php - php8.1-pgsql - zabbix-nginx-conf - zabbix-sql-scripts - zabbix-agent packages_to_restart: - zabbix-server - zabbix-agent - nginx - php8.1-fpm Step 6 - Importing initial schema for Zabbix server # You will be prompted to enter your zabbix-user password (stored in ansible_secrets.yaml postgres_zabbix_server_user_vars.db_user_password) zcat /usr/share/zabbix-sql-scripts/postgresql/server.sql.gz | sudo -u zabbix psql zabbix Step 7 - Configuring the \" DBPassword \" in /etc/zabbix/zabbix_server.conf nano /etc/zabbix/zabbix_server.conf DBPassword=some_strong_zabbix_password (ansible_secrets.yaml postgres_zabbix_server_user_vars.db_user_password) Step 8, 9 - Configuring the \" listen \" and \" server_name \" in /etc/zabbix/nginx.conf nano /etc/zabbix/nginx.conf listen 8080 # IP or DDNS address server_name monitoring-wiki.ddns.net Step 10 - Restarting and Enabling services systemctl start <service_name> systemctl enable <service_name> # Check services status systemctl status <service_name> systemctl is-enabled <service_name> Show apt packages to restart and enable --- # vars file for zabbix_server_monitoring_system apt_packages_to_install: - zabbix-server-pgsql - zabbix-frontend-php - php8.1-pgsql - zabbix-nginx-conf - zabbix-sql-scripts - zabbix-agent packages_to_restart: - zabbix-server - zabbix-agent - nginx - php8.1-fpm","title":"Manual"},{"location":"7.1.%20ansible_pipeline/#zabbix-agent-setup","text":"Target VM: All( VM-1 vm-1-monitoring-system , VM-2 vm-2-nginx-proxy-server , VM-3 vm-3-mediawiki-server-1 , VM-4 vm-4-mediawiki-server-2 , VM-5 vm-5-haproxy-proxy-server , VM-6 vm-6-primary-db , VM-7 vm-7-standby-db )","title":"Zabbix-Agent Setup"},{"location":"7.1.%20ansible_pipeline/#ansible_11","text":"Tasks: # Step 1 - Downloading the Zabbix repository # Step 2 - Installing the Zabbix repository # Step 3 - Updating the apt repository # Step 4 - Install packages # Step 5 - Configuring the \"Server\" in /etc/zabbix/zabbix_agentd.conf # Step 6 - Configuring the \"ServerActive\" in /etc/zabbix/zabbix_agentd.conf # Step 7 - Configuring the \"Hostname\" in /etc/zabbix/zabbix_agentd.conf # Step 8 - Restarting and enabling packages Running playbook: ansible-playbook playbook.yaml \\ -i inventory.yaml --tags=\"zabbix_agent_setup\"","title":"Ansible"},{"location":"7.1.%20ansible_pipeline/#manual_11","text":"Step 1 - Downloading the Zabbix repository cd /tmp wget https://repo.zabbix.com/zabbix/7.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest+ubuntu22.04_all.deb -O /tmp/zabbix_all.deb Step 2 - Installing Zabbix repository dpkg -i zabbix_all.deb Step 3, 4 - Update list of packages, install apt packages Show apt packages to install --- # vars file for zabbix_agent_monitoring_system apt_packages_to_install: - zabbix-agent packages_to_restart: - zabbix-agent Step 5, 6, 7 - Configuring the Server, ServerActive, Hostname in /etc/zabbix/zabbix_agentd.conf Server=192.168.10.12 ServerActive=192.168.10.12 Hostname=<current_host_name> Step 8 - Restarting and Enabling services systemctl start <service_name> systemctl enable <service_name> # Check services status systemctl status <service_name> systemctl is-enabled <service_name> Show apt packages to restart and enable --- # vars file for zabbix_agent_monitoring_system apt_packages_to_install: - zabbix-agent packages_to_restart: - zabbix-agent","title":"Manual"},{"location":"8.1.%20manual_failover_from_primary_to_standby_db/","text":"Manual Failover From the Primary PostgreSQL to the Standby PostgreSQL Files and Variables Setup Review or Modify the ansible_structure.py ~/MediaWiki-Doc-Management-Service/python_scripts/ansible_structure.py file This file contains dynamic_groups dictionary which confugires the output inventory.yaml file The file is already configured. No changes are needed. Create inventory.yaml ~/MediaWiki-Doc-Management-Service/Ansible/inventory.yaml by running update_ansible_inventory.py ~/MediaWiki-Doc-Management-Service/python_scripts/update_ansible_inventory.py Show inventory.yaml_EXAMPLE linuxVM: children: monitoringSystem: hosts: vm-1-monitoring-system: ansible_host: 51.250.1.167 external_disks: - disk_id: fhmmla0r5sm2j6c4le8l disk_name: vhdd-1-monitoring-system-db mount_point: /opt/vhdd-1-monitoring-system-db filesystem: ext4 nginxProxyServer: hosts: vm-2-nginx-proxy-server: ansible_host: 130.193.38.129 mediawikiServer: hosts: vm-3-mediawiki-server-1: ansible_host: 130.193.37.91 vm-4-mediawiki-server-2: ansible_host: 62.84.116.227 haproxyProxyServer: hosts: vm-5-haproxy-proxy-server: ansible_host: 130.193.36.108 primaryDb: hosts: vm-6-primary-db: ansible_host: 84.252.128.13 external_disks: - disk_id: fhmvasqeieo3t7nqlol7 disk_name: vssd-1-primary-db mount_point: /opt/vssd-1-primary-db filesystem: ext4 standbyDb: hosts: vm-7-standby-db: ansible_host: 51.250.67.113 external_disks: - disk_id: fhm0653bevuv57f7ng16 disk_name: vhdd-2-standby-db mount_point: /opt/vhdd-2-standby-db filesystem: ext4 - disk_id: fhm9rbu6jc8q2ak0cni2 disk_name: vhdd-3-dump-db mount_point: /opt/vhdd-3-dump-db filesystem: ext4 vars: ansible_user: root ansible_password: '' connection_protocol: ssh Review or Replace the Private SSH Key File in the ~/MediaWiki-Doc-Management-Service/Ansible/common_files Directory This Private SSH Key file is required to allow SSH connections between specific VMs # If there is no Private SSH Key file, or if you wish to replace the current one, run the following command cp ~/.ssh/id_ed25519 ~/MediaWiki-Doc-Management-Service/Ansible/common_files File Encryption with Ansible Voult # Encrypting the Private SSH Key File Using Vault-ID: \"private_ssh_key\" ansible-vault encrypt --vault-id private_ssh_key@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/id_ed25519\" Write Ansible Voult password to file: echo \"password1\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_private_ssh_key.txt Review or Modify the ansible_secrets.yml ~/MediaWiki-Doc-Management-Service/Ansible/common_files/ansible_secrets.yml File The ansible_secrets.yml file contains secret variables, such as database connection credentials, IP addresses, and more Show ansible_secrets.yml_EXAMPLE --- # vars file for db_postgresql postgres_vars: db_name: my_wiki db_tablespace_name: primary_tablespace db_port: 5432 db_backups_dir: /opt/vhdd-3-dump-db postgres_zabbix_server_vars: db_name: zabbix db_tablespace_name: primary_tablespace db_port: 5432 db_backups_dir: /opt/vhdd-1-monitoring-system-db/zabbix_dump postgres_wikiuser_user_vars: db_user: wikiuser db_user_password: password1 attr: - SUPERUSER - CREATEDB - CREATEROLE - LOGIN - INHERIT postgres_replication_user_vars: db_user: syncuser db_user_password: password2 attr: - REPLICATION postgres_zabbix_server_user_vars: db_user: zabbix db_user_password: password1 attr: - SUPERUSER - CREATEDB - CREATEROLE - LOGIN - INHERIT vm_7_standby_db_private_key_ssh: remote_host: 192.168.10.16 remote_user: root private_key_ssh_path: /root/.ssh/id_ed25519 secret_vm_3_mediawiki_server_1: host_ip: 192.168.10.13 user: root secret_vm_4_mediawiki_server_2: host_ip: 192.168.10.14 user: root remote_host_ip: 192.168.10.13 remote_user: root File Encryption with Ansible Voult # Encrypting the ansible_secrets.yml File Using Vault-ID: \"ansible_secrets\" ansible-vault encrypt --vault-id ansible_secrets@prompt ~/MediaWiki-Doc-Management-Service/Ansible/common_files/ansible_secrets.yaml Write Ansible Voult password to file: echo \"password2\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt Review or Modify the LocalSettings.php ~/MediaWiki-Doc-Management-Service/Ansible/common_files/LocalSettings.php File The LocalSettings.php file contains the MediaWiki configuration Pay attention to the following blocks and lines in the file: line: $wgServer = 'http://nginx-proxy server IP or URL address'; The address that users will use to access the MediaWiki service line: $wgDefaultSkin = 'monobook'; The theme MediaWiki service block: Database settings Credentials for Database Connection block: Postgres specific settings Database Connection Settings Show LocalSettings.php_EXAMPLE <?php # This file was automatically generated by the MediaWiki 1.42.3 # installer. If you make manual changes, please keep track in case you # need to recreate them later. # # See includes/MainConfigSchema.php for all configurable settings # and their default values, but don't forget to make changes in _this_ # file, not there. # # Further documentation for configuration settings may be found at: # https://www.mediawiki.org/wiki/Manual:Configuration_settings # Protect against web entry if ( !defined( 'MEDIAWIKI' ) ) { exit; } ## Uncomment this to disable output compression # $wgDisableOutputCompression = true; $wgSitename = 'sprint13_yp'; $wgMetaNamespace = 'Sprint13_yp'; ## The URL base path to the directory containing the wiki; ## defaults for all runtime URL paths are based off of this. ## For more information on customizing the URLs ## (like /w/index.php/Page_title to /wiki/Page_title) please see: ## https://www.mediawiki.org/wiki/Manual:Short_URL $wgScriptPath = ''; ## The protocol and server name to use in fully-qualified URLs $wgServer = 'http://130.193.39.49'; ## The URL path to static resources (images, scripts, etc.) $wgResourceBasePath = $wgScriptPath; ## The URL paths to the logo. Make sure you change this from the default, ## or else you'll overwrite your logo when you upgrade! $wgLogos = [ '1x' => \"$wgResourceBasePath/resources/assets/change-your-logo.svg\", 'icon' => \"$wgResourceBasePath/resources/assets/change-your-logo.svg\", ]; ## UPO means: this is also a user preference option $wgEnableEmail = true; $wgEnableUserEmail = true; # UPO $wgEmergencyContact = ''; $wgPasswordSender = ''; $wgEnotifUserTalk = false; # UPO $wgEnotifWatchlist = false; # UPO $wgEmailAuthentication = true; ## Database settings $wgDBtype = 'postgres'; $wgDBserver = '192.168.10.16'; $wgDBname = 'my_wiki'; $wgDBuser = 'wikiuser'; $wgDBpassword = 'YOUR_SUPER_STRONG_PASSWORD'; # Postgres specific settings $wgDBport = \"5432\"; $wgDBssl = false; $wgDBmwschema = \"mediawiki\"; # Shared database table # This has no effect unless $wgSharedDB is also set. $wgSharedTables[] = \"actor\"; ## Shared memory settings $wgMainCacheType = CACHE_ACCEL; $wgMemCachedServers = []; ## To enable image uploads, make sure the 'images' directory ## is writable, then set this to true: $wgEnableUploads = false; #$wgUseImageMagick = true; #$wgImageMagickConvertCommand = '/usr/bin/convert'; # InstantCommons allows wiki to use images from https://commons.wikimedia.org $wgUseInstantCommons = false; # Periodically send a pingback to https://www.mediawiki.org/ with basic data # about this MediaWiki instance. The Wikimedia Foundation shares this data # with MediaWiki developers to help guide future development efforts. $wgPingback = true; # Site language code, should be one of the list in ./includes/languages/data/Names.php $wgLanguageCode = 'en'; # Time zone $wgLocaltimezone = 'UTC'; ## Set $wgCacheDirectory to a writable directory on the web server ## to make your wiki go slightly faster. The directory should not ## be publicly accessible from the web. #$wgCacheDirectory = \"$IP/cache\"; $wgSecretKey = '2d4a43e01b5d47793a1120c3cdff6440a6974780e8fe3b57504dfd388ddc3326'; # Changing this will log out all existing sessions. $wgAuthenticationTokenVersion = '1'; # Site upgrade key. Must be set to a string (default provided) to turn on the # web installer while LocalSettings.php is in place $wgUpgradeKey = '09a43ca42d627f31'; ## For attaching licensing metadata to pages, and displaying an ## appropriate copyright notice / icon. GNU Free Documentation ## License and Creative Commons licenses are supported so far. $wgRightsPage = \"\"; # Set to the title of a wiki page that describes your license/copyright $wgRightsUrl = ''; $wgRightsText = ''; $wgRightsIcon = \"\"; # Path to the GNU diff3 utility. Used for conflict resolution. $wgDiff3 = '/usr/bin/diff3'; ## Default skin: you can change the default skin. Use the internal symbolic ## names, e.g. 'vector' or 'monobook': $wgDefaultSkin = 'monobook'; # Enabled skins. # The following skins were automatically enabled: wfLoadSkin( 'MinervaNeue' ); wfLoadSkin( 'MonoBook' ); wfLoadSkin( 'Timeless' ); wfLoadSkin( 'Vector' ); # End of automatically generated settings. # Add more configuration options below. File Encryption with Ansible Voult # Encrypting the LocalSettings.php File Using Vault-ID: \"mediawiki_localsettings\" ansible-vault encrypt --vault-id mediawiki_localsettings@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/LocalSettings.php\" Write Ansible Voult password to file: echo \"password3\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_mediawiki_localsettings.txt DDNS Setup DDNS is used to eliminate the need to change IP addresses in configuration files. To configure DDNS, follow these steps: Register with a DDNS provider, such as noip.com Creating a custom hostname Configuring the Dynamic Update Client (DUC) DUC configuration is performed during Ansible tasks, so there is no need to configure it manually Review or modify the two noip-duc files: The duc_nginx_mediawiki ~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_nginx_mediawiki File The duc_zabbix_server ~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_zabbix_server File The noip-duc file contains the noip.com credentials for automatically updating the NAT IP address with the DDNS provider Show noip-duc_EXAMPLE NOIP_USERNAME=myusername NOIP_PASSWORD=mypassword NOIP_HOSTNAMES=example.ddns.net File Encryption with Ansible Voult # Encrypting the duc_nginx_mediawiki File Using Vault-ID: \"duc_nginx_mediawiki\" ansible-vault encrypt --vault-id duc_nginx_mediawiki@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_nginx_mediawiki\" # Encrypting the duc_zabbix_server File Using Vault-ID: \"duc_zabbix_server\" ansible-vault encrypt --vault-id duc_nginx_mediawiki@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_zabbix_server\" Write Ansible Voult password to file: echo \"password4\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_duc_zabbix_server.txt echo \"password5\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_duc_nginx_mediawiki.txt Essential Ansible commands Ansible # Checking syntax and availability of cloud resources ansible all -m ping -i inventory.yaml # Installing or updating the collection ansible-galaxy collection install <collection name> # List of installed collections ansible-galaxy collection list # Creating a role (used to separate tasks that will be executed within the playbook) ansible-galaxy init <role name> # List of used roles ansible-galaxy role list # Running the playbook ansible-playbook <playbook>.yaml name> -i <inventory>.yaml name> --tags=\"<tag>\" #Example: ansible-playbook mount_disks_playbook.yaml -i inventory.yaml --tags=\"mount\" Ansible Vault # Encrypting File using Ansible Vault ansible-vault encrypt --vault-id <vault-id-name>@prompt \"<path to file>\" # Change Vault Password ansible-vault rekey \"<path to file>\" # Edit Vault-Encrypted File ansible-vault edit \"<path to file>\" # Decrypting File ansible-vault decrypt \"<path to file>\" # Viewing the Vault-Encrypted File ansible-vault view \"<path to file>\"","title":"8. Manual failover from the Primary PostgreSQL to the Standby PostgreSQL"},{"location":"8.1.%20manual_failover_from_primary_to_standby_db/#manual-failover-from-the-primary-postgresql-to-the-standby-postgresql","text":"","title":"Manual Failover From the Primary PostgreSQL to the Standby PostgreSQL"},{"location":"8.1.%20manual_failover_from_primary_to_standby_db/#files-and-variables-setup","text":"Review or Modify the ansible_structure.py ~/MediaWiki-Doc-Management-Service/python_scripts/ansible_structure.py file This file contains dynamic_groups dictionary which confugires the output inventory.yaml file The file is already configured. No changes are needed. Create inventory.yaml ~/MediaWiki-Doc-Management-Service/Ansible/inventory.yaml by running update_ansible_inventory.py ~/MediaWiki-Doc-Management-Service/python_scripts/update_ansible_inventory.py Show inventory.yaml_EXAMPLE linuxVM: children: monitoringSystem: hosts: vm-1-monitoring-system: ansible_host: 51.250.1.167 external_disks: - disk_id: fhmmla0r5sm2j6c4le8l disk_name: vhdd-1-monitoring-system-db mount_point: /opt/vhdd-1-monitoring-system-db filesystem: ext4 nginxProxyServer: hosts: vm-2-nginx-proxy-server: ansible_host: 130.193.38.129 mediawikiServer: hosts: vm-3-mediawiki-server-1: ansible_host: 130.193.37.91 vm-4-mediawiki-server-2: ansible_host: 62.84.116.227 haproxyProxyServer: hosts: vm-5-haproxy-proxy-server: ansible_host: 130.193.36.108 primaryDb: hosts: vm-6-primary-db: ansible_host: 84.252.128.13 external_disks: - disk_id: fhmvasqeieo3t7nqlol7 disk_name: vssd-1-primary-db mount_point: /opt/vssd-1-primary-db filesystem: ext4 standbyDb: hosts: vm-7-standby-db: ansible_host: 51.250.67.113 external_disks: - disk_id: fhm0653bevuv57f7ng16 disk_name: vhdd-2-standby-db mount_point: /opt/vhdd-2-standby-db filesystem: ext4 - disk_id: fhm9rbu6jc8q2ak0cni2 disk_name: vhdd-3-dump-db mount_point: /opt/vhdd-3-dump-db filesystem: ext4 vars: ansible_user: root ansible_password: '' connection_protocol: ssh Review or Replace the Private SSH Key File in the ~/MediaWiki-Doc-Management-Service/Ansible/common_files Directory This Private SSH Key file is required to allow SSH connections between specific VMs # If there is no Private SSH Key file, or if you wish to replace the current one, run the following command cp ~/.ssh/id_ed25519 ~/MediaWiki-Doc-Management-Service/Ansible/common_files File Encryption with Ansible Voult # Encrypting the Private SSH Key File Using Vault-ID: \"private_ssh_key\" ansible-vault encrypt --vault-id private_ssh_key@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/id_ed25519\" Write Ansible Voult password to file: echo \"password1\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_private_ssh_key.txt Review or Modify the ansible_secrets.yml ~/MediaWiki-Doc-Management-Service/Ansible/common_files/ansible_secrets.yml File The ansible_secrets.yml file contains secret variables, such as database connection credentials, IP addresses, and more Show ansible_secrets.yml_EXAMPLE --- # vars file for db_postgresql postgres_vars: db_name: my_wiki db_tablespace_name: primary_tablespace db_port: 5432 db_backups_dir: /opt/vhdd-3-dump-db postgres_zabbix_server_vars: db_name: zabbix db_tablespace_name: primary_tablespace db_port: 5432 db_backups_dir: /opt/vhdd-1-monitoring-system-db/zabbix_dump postgres_wikiuser_user_vars: db_user: wikiuser db_user_password: password1 attr: - SUPERUSER - CREATEDB - CREATEROLE - LOGIN - INHERIT postgres_replication_user_vars: db_user: syncuser db_user_password: password2 attr: - REPLICATION postgres_zabbix_server_user_vars: db_user: zabbix db_user_password: password1 attr: - SUPERUSER - CREATEDB - CREATEROLE - LOGIN - INHERIT vm_7_standby_db_private_key_ssh: remote_host: 192.168.10.16 remote_user: root private_key_ssh_path: /root/.ssh/id_ed25519 secret_vm_3_mediawiki_server_1: host_ip: 192.168.10.13 user: root secret_vm_4_mediawiki_server_2: host_ip: 192.168.10.14 user: root remote_host_ip: 192.168.10.13 remote_user: root File Encryption with Ansible Voult # Encrypting the ansible_secrets.yml File Using Vault-ID: \"ansible_secrets\" ansible-vault encrypt --vault-id ansible_secrets@prompt ~/MediaWiki-Doc-Management-Service/Ansible/common_files/ansible_secrets.yaml Write Ansible Voult password to file: echo \"password2\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_ansible_secrets.txt Review or Modify the LocalSettings.php ~/MediaWiki-Doc-Management-Service/Ansible/common_files/LocalSettings.php File The LocalSettings.php file contains the MediaWiki configuration Pay attention to the following blocks and lines in the file: line: $wgServer = 'http://nginx-proxy server IP or URL address'; The address that users will use to access the MediaWiki service line: $wgDefaultSkin = 'monobook'; The theme MediaWiki service block: Database settings Credentials for Database Connection block: Postgres specific settings Database Connection Settings Show LocalSettings.php_EXAMPLE <?php # This file was automatically generated by the MediaWiki 1.42.3 # installer. If you make manual changes, please keep track in case you # need to recreate them later. # # See includes/MainConfigSchema.php for all configurable settings # and their default values, but don't forget to make changes in _this_ # file, not there. # # Further documentation for configuration settings may be found at: # https://www.mediawiki.org/wiki/Manual:Configuration_settings # Protect against web entry if ( !defined( 'MEDIAWIKI' ) ) { exit; } ## Uncomment this to disable output compression # $wgDisableOutputCompression = true; $wgSitename = 'sprint13_yp'; $wgMetaNamespace = 'Sprint13_yp'; ## The URL base path to the directory containing the wiki; ## defaults for all runtime URL paths are based off of this. ## For more information on customizing the URLs ## (like /w/index.php/Page_title to /wiki/Page_title) please see: ## https://www.mediawiki.org/wiki/Manual:Short_URL $wgScriptPath = ''; ## The protocol and server name to use in fully-qualified URLs $wgServer = 'http://130.193.39.49'; ## The URL path to static resources (images, scripts, etc.) $wgResourceBasePath = $wgScriptPath; ## The URL paths to the logo. Make sure you change this from the default, ## or else you'll overwrite your logo when you upgrade! $wgLogos = [ '1x' => \"$wgResourceBasePath/resources/assets/change-your-logo.svg\", 'icon' => \"$wgResourceBasePath/resources/assets/change-your-logo.svg\", ]; ## UPO means: this is also a user preference option $wgEnableEmail = true; $wgEnableUserEmail = true; # UPO $wgEmergencyContact = ''; $wgPasswordSender = ''; $wgEnotifUserTalk = false; # UPO $wgEnotifWatchlist = false; # UPO $wgEmailAuthentication = true; ## Database settings $wgDBtype = 'postgres'; $wgDBserver = '192.168.10.16'; $wgDBname = 'my_wiki'; $wgDBuser = 'wikiuser'; $wgDBpassword = 'YOUR_SUPER_STRONG_PASSWORD'; # Postgres specific settings $wgDBport = \"5432\"; $wgDBssl = false; $wgDBmwschema = \"mediawiki\"; # Shared database table # This has no effect unless $wgSharedDB is also set. $wgSharedTables[] = \"actor\"; ## Shared memory settings $wgMainCacheType = CACHE_ACCEL; $wgMemCachedServers = []; ## To enable image uploads, make sure the 'images' directory ## is writable, then set this to true: $wgEnableUploads = false; #$wgUseImageMagick = true; #$wgImageMagickConvertCommand = '/usr/bin/convert'; # InstantCommons allows wiki to use images from https://commons.wikimedia.org $wgUseInstantCommons = false; # Periodically send a pingback to https://www.mediawiki.org/ with basic data # about this MediaWiki instance. The Wikimedia Foundation shares this data # with MediaWiki developers to help guide future development efforts. $wgPingback = true; # Site language code, should be one of the list in ./includes/languages/data/Names.php $wgLanguageCode = 'en'; # Time zone $wgLocaltimezone = 'UTC'; ## Set $wgCacheDirectory to a writable directory on the web server ## to make your wiki go slightly faster. The directory should not ## be publicly accessible from the web. #$wgCacheDirectory = \"$IP/cache\"; $wgSecretKey = '2d4a43e01b5d47793a1120c3cdff6440a6974780e8fe3b57504dfd388ddc3326'; # Changing this will log out all existing sessions. $wgAuthenticationTokenVersion = '1'; # Site upgrade key. Must be set to a string (default provided) to turn on the # web installer while LocalSettings.php is in place $wgUpgradeKey = '09a43ca42d627f31'; ## For attaching licensing metadata to pages, and displaying an ## appropriate copyright notice / icon. GNU Free Documentation ## License and Creative Commons licenses are supported so far. $wgRightsPage = \"\"; # Set to the title of a wiki page that describes your license/copyright $wgRightsUrl = ''; $wgRightsText = ''; $wgRightsIcon = \"\"; # Path to the GNU diff3 utility. Used for conflict resolution. $wgDiff3 = '/usr/bin/diff3'; ## Default skin: you can change the default skin. Use the internal symbolic ## names, e.g. 'vector' or 'monobook': $wgDefaultSkin = 'monobook'; # Enabled skins. # The following skins were automatically enabled: wfLoadSkin( 'MinervaNeue' ); wfLoadSkin( 'MonoBook' ); wfLoadSkin( 'Timeless' ); wfLoadSkin( 'Vector' ); # End of automatically generated settings. # Add more configuration options below. File Encryption with Ansible Voult # Encrypting the LocalSettings.php File Using Vault-ID: \"mediawiki_localsettings\" ansible-vault encrypt --vault-id mediawiki_localsettings@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/LocalSettings.php\" Write Ansible Voult password to file: echo \"password3\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_mediawiki_localsettings.txt","title":"Files and Variables Setup"},{"location":"8.1.%20manual_failover_from_primary_to_standby_db/#ddns-setup","text":"DDNS is used to eliminate the need to change IP addresses in configuration files. To configure DDNS, follow these steps: Register with a DDNS provider, such as noip.com Creating a custom hostname Configuring the Dynamic Update Client (DUC) DUC configuration is performed during Ansible tasks, so there is no need to configure it manually Review or modify the two noip-duc files: The duc_nginx_mediawiki ~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_nginx_mediawiki File The duc_zabbix_server ~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_zabbix_server File The noip-duc file contains the noip.com credentials for automatically updating the NAT IP address with the DDNS provider Show noip-duc_EXAMPLE NOIP_USERNAME=myusername NOIP_PASSWORD=mypassword NOIP_HOSTNAMES=example.ddns.net File Encryption with Ansible Voult # Encrypting the duc_nginx_mediawiki File Using Vault-ID: \"duc_nginx_mediawiki\" ansible-vault encrypt --vault-id duc_nginx_mediawiki@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_nginx_mediawiki\" # Encrypting the duc_zabbix_server File Using Vault-ID: \"duc_zabbix_server\" ansible-vault encrypt --vault-id duc_nginx_mediawiki@prompt \"~/MediaWiki-Doc-Management-Service/Ansible/common_files/duc_zabbix_server\" Write Ansible Voult password to file: echo \"password4\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_duc_zabbix_server.txt echo \"password5\" > ~/MediaWiki-Doc-Management-Service/Ansible/vault_passwords/vault_duc_nginx_mediawiki.txt","title":"DDNS Setup"},{"location":"8.1.%20manual_failover_from_primary_to_standby_db/#essential-ansible-commands","text":"Ansible # Checking syntax and availability of cloud resources ansible all -m ping -i inventory.yaml # Installing or updating the collection ansible-galaxy collection install <collection name> # List of installed collections ansible-galaxy collection list # Creating a role (used to separate tasks that will be executed within the playbook) ansible-galaxy init <role name> # List of used roles ansible-galaxy role list # Running the playbook ansible-playbook <playbook>.yaml name> -i <inventory>.yaml name> --tags=\"<tag>\" #Example: ansible-playbook mount_disks_playbook.yaml -i inventory.yaml --tags=\"mount\" Ansible Vault # Encrypting File using Ansible Vault ansible-vault encrypt --vault-id <vault-id-name>@prompt \"<path to file>\" # Change Vault Password ansible-vault rekey \"<path to file>\" # Edit Vault-Encrypted File ansible-vault edit \"<path to file>\" # Decrypting File ansible-vault decrypt \"<path to file>\" # Viewing the Vault-Encrypted File ansible-vault view \"<path to file>\"","title":"Essential Ansible commands"}]}