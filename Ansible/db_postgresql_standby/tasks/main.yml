---
# ===================================
# Block with Standby PostgreSQL tasks
# ===================================

# Adding secret variables
- name: Step 1 - Adding secret variables
  include_vars: "{{ playbook_dir }}/common_files/ansible_secrets.yaml"
  tags:
    - standby_postgresql_setup_adding_secret_variables

# Creating dynamic variables
- name: Step 2 - Creating dynamic variables
  set_fact:
    mount_point: "{{ hostvars[inventory_hostname]['external_disks'] | map(attribute='mount_point') | list }}"
  tags:
    - standby_postgresql_setup_creating_dynamic_variables

# Stopping the PostgreSQL service
- name: Step 3 - Stopping the PostgreSQL service
  become: true
  become_user: root
  systemd:
    name: postgresql
    state: stopped
  tags:
    - standby_postgresql_setup_stopping_postgresql_service


# # Adding permissions to pg_hba.conf for connecting to the Standby PostgreSQL
# - name: Step 4 - Adding permissions to pg_hba.conf for connecting to the Standby PostgreSQL
#   become: true
#   become_user: postgres
#   blockinfile:
#     path: /etc/postgresql/14/main/pg_hba.conf
#     block: |
#       host my_wiki       wikiuser       77.137.79.100/32                                                scram-sha-256
#       host my_wiki       wikiuser       212.179.174.196/32                                              scram-sha-256
#       host my_wiki       wikiuser       {{ hostvars['vm-1-monitoring-system'].ansible_host }}/32        scram-sha-256
#       host my_wiki       wikiuser       192.168.10.11/32                                                scram-sha-256    
#       host my_wiki       wikiuser       {{ hostvars['vm-3-mediawiki-server-1'].ansible_host }}/32       scram-sha-256    
#       host my_wiki       wikiuser       192.168.10.13/32                                                scram-sha-256
#       host my_wiki       wikiuser       {{ hostvars['vm-4-mediawiki-server-2'].ansible_host }}/32       scram-sha-256    
#       host my_wiki       wikiuser       192.168.10.14/32                                                scram-sha-256
#       host my_wiki       wikiuser       {{ hostvars['vm-5-haproxy-proxy-server'].ansible_host }}/32     scram-sha-256    
#       host my_wiki       wikiuser       192.168.10.15/32                                                scram-sha-256
#       host my_wiki       wikiuser       {{ hostvars['vm-6-primary-db'].ansible_host }}/32               scram-sha-256    
#       host my_wiki       wikiuser       192.168.10.16/32                                                scram-sha-256
#       host my_wiki       wikiuser       {{ hostvars['vm-7-standby-db'].ansible_host }}/32               scram-sha-256
#       host my_wiki       wikiuser       192.168.10.17/32                                                scram-sha-256
#       host replication   syncuser       77.137.79.100/32                                                scram-sha-256
#       host replication   syncuser       212.179.174.196/32                                              scram-sha-256     
#       host replication   syncuser       {{ hostvars['vm-6-primary-db'].ansible_host }}/32               scram-sha-256    
#       host replication   syncuser       192.168.10.16/32                                                scram-sha-256
#       host replication   syncuser       {{ hostvars['vm-7-standby-db'].ansible_host }}/32               scram-sha-256
#       host replication   syncuser       192.168.10.17/32                                                scram-sha-256

#     marker: "# {mark} Ansible managed block for PostgreSQL"
#   notify: restart_postgresql
#   tags:
#     - standby_postgresql_setup_configuring_connect_permissions_dir_pg_hba_conf


# Configuring the hot_standby in /etc/postgresql/14/main/postgresql.conf
- name: Step 5 - Configuring the hot_standby in /etc/postgresql/14/main/postgresql.conf
  become: true
  become_user: postgres
  replace:
    path: /etc/postgresql/14/main/postgresql.conf
    regexp: '^#?\s*hot_standby\s*=\s*.*'
    replace: 'hot_standby = on'
  notify: restart_postgresql
  tags:
    - standby_postgresql_setup_configuring_hot_standby_postgresql_conf

# Deleting all contents inside the PostgreSQL Replication directory
- name: Step 6 - Deleting all contents inside the PostgreSQL Replication directory ({{ hostvars['vm-7-standby-db'].external_disks[0].mount_point }}/postgresql/14/main)
  become: true
  become_user: root
  command: rm -rf {{ hostvars['vm-7-standby-db'].external_disks[0].mount_point }}/postgresql/14/main/
  tags:
    - standby_postgresql_setup_deleting_contents_in_replication_directory


# Restarting the PostgreSQL service
- name: Step 7 - Restarting the PostgreSQL service
  become: true
  become_user: root
  systemd:
    name: postgresql
    state: restarted
  tags:
    - standby_postgresql_setup_restart_postgresql_service




# Starting Replication
# - h MAIN_IP — the address of the Primary PostgreSQL
# - D — the folder where the backup should be placed
# - U — the user for connection
# - P — prompts for password input
# - v — outputs a detailed log of the command execution
# - R — creates a standby.signal file in the database folder. This is a marker for the PostgreSQL server to start in standby mode

- name: Step 8 - Starting pg_basebackup for replication
  become: true
  become_user: postgres
  shell: |
    pg_basebackup -h 192.168.10.16 -D {{ hostvars['vm-7-standby-db'].external_disks[0].mount_point }}/postgresql/14/main \
    -U {{ postgres_replication_user_vars.db_user }} \
    -P -v -R
  environment:
    PGPASSWORD: "{{ postgres_replication_user_vars.db_user_password }}"
  notify: restart_postgresql
  when: db_hosts.standby in inventory_hostname
  tags:
  tags:
    - standby_postgresql_setup_starting_replicationrun_pg_basebackup




# =======================================================
# Block with Standby PostgreSQL tasks for creating a dump
# =======================================================

# Creating the /scripts directory with '0755' permissions, where scripts for the dump will be stored
# Owner: rwx (read, write, and execute)
# Group: r-x (read and execute)
# Others: r-x (read and execute)
- name: Step 9 - Creating the /scripts directory with '0755' permissions
  become: true
  become_user: root
  ansible.builtin.file:
    path: /scripts 
    state: directory
    mode: '0755'
  tags:
    - standby_postgresql_setup_creating_scripts_directory

# Creating the .env file in /scripts directory with '0740' permissions
# Owner: rwx (read, write, and execute)
# Group: r-- (read only)
# Others: --- (no access)
- name: Step 10 - Creating the .env file in /scripts directory with '0740' permissions
  become: true
  become_user: root
  ansible.builtin.file:
    path: "/scripts/.env"
    state: touch
    group: dbadmin
    mode: '0740'
  tags:
    - standby_postgresql_setup_creating_env_file

# Copying the pgdump_standby_postgresql.py script to ~/scripts with '0755' permissions
# Owner: rwx (read, write, and execute)
# Group: r-x (read and execute)
# Others: r-x (read and execute)
- name: Step 11 - Copying the pgdump_standby_postgresql.py script to ~/scripts with '0755' permissions
  become: true
  become_user: root
  copy:
    src: "{{ playbook_dir }}/common_files/postgresql_standby/pgdump_standby_postgresql.py"
    dest: /scripts/
    mode: '0755'
  tags:
    - standby_postgresql_setup_copy_pgdump_standby_posgresql_py


# Filling the .env file with data
- name: Step 12 - Filling the .env file with data
  become: true
  become_user: root
  blockinfile:
    path: /scripts/.env
    block: |
      BACKUPS_DIR="{{ postgres_vars.db_backups_dir }}"
      DATABASE_USER={{ postgres_wikiuser_user_vars.db_user }}
      DATABASE_PASSWORD={{ postgres_wikiuser_user_vars.db_user_password }}
      DATABASE_NAME={{ postgres_vars.db_name }}
      DATABASE_PORT={{ postgres_vars.db_port }}
      REMOTE_HOST={{ vm_7_standby_db_private_key_ssh.remote_host }}
      REMOTE_USER={{ vm_7_standby_db_private_key_ssh.remote_user }}
      PRIVATE_KEY_PATH={{ vm_7_standby_db_private_key_ssh.private_key_ssh_path }}

    marker: "# {mark} Ansible managed block for .env"
  tags:
    - standby_postgresql_setup_filling_env_data



# Copying the private SSH key to ~/.ssh with '600' permissions
# Owner: rw- (read, write)
- name: Step 13 - Copying Private ssh-key to ~/.ssh with '600' permissions
  become: true
  become_user: root
  copy:
    src: "{{ playbook_dir }}/common_files/id_ed25519"
    dest: ~/.ssh
    mode: '600'    
  tags:
    - standby_postgresql_setup_copying_private_ssh_key


# Copying the logrotate_pgdump_standby_posgresql file to /etc/logrotate.d/
# Command for forcing logrotate to run: logrotate -f /etc/logrotate.conf
- name: Step 14 - Copying the logrotate_pgdump_standby_posgresql file to /etc/logrotate.d/
  become: true
  become_user: root
  copy:
    src: "{{ playbook_dir }}/common_files/postgresql_standby/logrotate_pgdump_standby_posgresql"
    dest: /etc/logrotate.d/
  tags:
    - standby_postgresql_setup_logrotate_pgdump_standby_posgresql
    
# Starting and enabling the logrotate service
- name: Step 15 - Starting and enabling the logrotate service
  service:
    name=logrotate
    state=started 
    enabled=yes
  tags:
    - standby_postgresql_setup_start_enable_logrotate_service


# Adding the execution of pgdump_standby_postgresql.py to the cron job scheduler
# minute: '0' - run at the beginning of the hour
# hour: '*/4' - run every 4 hours"

- name: Step 16 - Adding the execution of pgdump_standby_postgresql.py to the cron job scheduler
  become: true
  become_user: root
  ansible.builtin.cron:
    name: "Run pgdump_standby_postgresql.py script"
    minute: "0"
    hour: "*/4"
    job: "/usr/bin/python3 /scripts/pgdump_standby_postgresql.py >> /scripts/pgdump_standby_postgresql.log 2>&1"
  notify: restart_cron
  tags:
    - standby_postgresql_setup_adding_execution_pgdump_standby_postgresql_py_cron_job_scheduler
