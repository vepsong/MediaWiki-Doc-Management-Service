---
# ===================================
# Block with Standby PostgreSQL tasks
# ===================================

# Adding secret variables
- name: Step 1 - Adding secret variables
  include_vars: "{{ playbook_dir }}/common_files/ansible_secrets.yaml"
  tags:
    - standby_postgresql_setup_adding_secret_variables

# Creating dynamic variables
- name: Step 2 - Creating dynamic variables
  set_fact:
    mount_point: "{{ hostvars[inventory_hostname]['external_disks'] | map(attribute='mount_point') | list }}"
  tags:
    - standby_postgresql_setup_creating_dynamic_variables

# Stopping the PostgreSQL service
- name: Step 3 - Stopping the PostgreSQL service
  become: true
  become_user: root
  systemd:
    name: postgresql
    state: stopped
  tags:
    - standby_postgresql_setup_stopping_postgresql_service

# Configuring the hot_standby in /etc/postgresql/14/main/postgresql.conf
- name: Step 4 - Configuring the hot_standby in /etc/postgresql/14/main/postgresql.conf
  become: true
  become_user: postgres
  replace:
    path: /etc/postgresql/14/main/postgresql.conf
    regexp: '^#?\s*hot_standby\s*=\s*.*'
    replace: 'hot_standby = on'
  notify: restart_postgresql
  tags:
    - standby_postgresql_setup_configuring_hot_standby_postgresql_conf

# Deleting all contents inside the PostgreSQL Replication directory
- name: Step 5 - Deleting all contents inside the PostgreSQL Replication directory ({{ hostvars['vm-7-postgresql-db-2'].external_disks[0].mount_point }}/postgresql/14/main)
  become: true
  become_user: root
  command: rm -rf {{ hostvars['vm-7-postgresql-db-2'].external_disks[0].mount_point }}/postgresql/14/main/
  tags:
    - standby_postgresql_setup_deleting_contents_in_replication_directory


# Restarting the PostgreSQL service
- name: Step 6 - Restarting the PostgreSQL service
  become: true
  become_user: root
  systemd:
    name: postgresql
    state: restarted
  tags:
    - standby_postgresql_setup_restart_postgresql_service




# Starting Replication
# - h MAIN_IP — the address of the Primary PostgreSQL
# - D — the folder where the backup should be placed
# - U — the user for connection
# - P — prompts for password input
# - v — outputs a detailed log of the command execution
# - R — creates a standby.signal file in the database folder. This is a marker for the PostgreSQL server to start in standby mode

- name: Step 7 - Starting pg_basebackup for replication
  become: true
  become_user: postgres
  shell: |
    pg_basebackup -h {{ hostvars['vm-6-postgresql-db-1'].ip_addr }} -D {{ hostvars['vm-7-postgresql-db-2'].external_disks[0].mount_point }}/postgresql/14/main \
    -U {{ mediawiki_postgresql_vars.db_replication_user }} \
    -P -v -R
  environment:
    PGPASSWORD: "{{ mediawiki_postgresql_vars.db_replication_user_password }}"
  notify: restart_postgresql
  tags:
    - standby_postgresql_setup_starting_replicationrun_pg_basebackup




# =======================================================
# Block with Standby PostgreSQL tasks for creating a dump
# =======================================================

# Creating a directory for storing backups 
- name: Step 8 - Creating a directory for storing backups "{{ mediawiki_postgresql_vars.db_backups_dir }}"
  ansible.builtin.file:
    path: "{{ mediawiki_postgresql_vars.db_backups_dir }}"
    state: directory
    mode: '0755'
  tags:
    - mount_external_disks_create_mount_dir


- name: Step 9 - Adding the execution of pgdump_standby_postgresql.py to the cron job scheduler
  become: true
  become_user: root
  ansible.builtin.cron:
    name: "Run pgdump_standby_postgresql.py script"
    minute: "0"
    hour: "*/4"
    job: "/usr/bin/python3 /scripts/pgdump_standby_postgresql.py >> /scripts/pgdump_standby_postgresql.log 2>&1"
  notify: restart_cron
  tags:
    - standby_postgresql_setup_adding_execution_pgdump_standby_postgresql_py_cron_job_scheduler
