# tasks file for mount_disk


# Инфо:
# 
# 1. Отобразить инфо о дисках и разделах: lsblk -f
# 2. Разметка диска новыми разделами (partition): fdisk /dev/<название устройства>
# 2.1. fdisk /dev/vdb далее g (создание таблицы разделов gpt) далее w (сохр. изменения и выйти)
# 3. Создание раздела диска (partition) и physical volume вместе с ним: fdisk /dev/<название устройства>
# 3.1. fdisk /dev/vdb далее n (создание раздела) далее 1 (номер раздела) далее enter (вопрос про секторы) далее w (сохр. изменения и выйти)
# 4. Инициализация Physical Volume: pvcreate /dev/<название раздела>
# 4.1. pvcreate /dev/vdb1 
# 5. Создание Volume Group: vgcreate <имя группы томов> /dev/<имя раздела>
# 5.1. vgcreate vg-db-storage /dev/vdb1 (vgs - проверка, что VG создан)
# 6. Cоздание Logical Volume: lvcreate -n <имя LV> -l <кол-во extents (можно посмотреть vgdisplay <имя VG>)> <имя VG>
# lvcreate -n lv-vhdd-1-monitoring-system-db -l 7167 vg-db-storage (lvs - проверка, что LV создан)
# 7. Форматирование LV и создание файловой системы ext4
# mkfs.ext4 /dev/vg-db-storage/lv-vhdd-1-monitoring-system-db
# 8. Создание точки монтирования
# mkdir /opt/vhdd-1-monitoring-system-db/
# 9. Монтирование LV
# mount /dev/vg-db-storage/lv-vhdd-1-monitoring-system-db /opt/vhdd-1-monitoring-system-db/
# 10. Добавить LV в автомонтирование /etc/fstab (проверка автомонтирования cat /etc/fstab или mount -a)
# echo "/dev/vg-db-storage/lv-vhdd-1-monitoring-system-db /opt/vhdd-1-monitoring-system-db/ ext4 defaults 0 0" | sudo tee -a /etc/fstab



---

- name: Шаг 1 - Получить disk_id и добавить "virtio-"
  set_fact:
    virtio_disk_ids: "{{ virtio_disk_ids | default([]) + ['virtio-' + item.disk_id] }}"
  loop: "{{ hostvars[inventory_hostname].external_disks | default([]) }}"

- name: Шаг 2 - Сравнить с ansible_facts.device_links.ids
  set_fact:
    device_names: "{{ device_names + [item.key] }}"
  loop: "{{ ansible_facts.device_links.ids | dict2items }}"
  when: item.value | intersect(virtio_disk_ids) | length > 0

- name: Шаг 3 - Создать динамические переменные
  set_fact:
    device_path: "{{ device_path + [origin_path + item] }}"
    logical_volume: "{{ hostvars[inventory_hostname]['external_disks'] | map(attribute='disk_name') | map('regex_replace', '^', 'lv-') | list }}"
    physical_volume: "{{ physical_volume + ([origin_path + item] | map('regex_replace', '$', '1')) }}"
    volume_group: "{{ hostvars[inventory_hostname]['external_disks'] | map(attribute='disk_name') | map('regex_replace', '^', 'vg-db-storage-') | list }}"
    mount_point: "{{ hostvars[inventory_hostname]['external_disks'] | map(attribute='mount_point') | list }}"
    # vg_lv_path: "{{ origin_path + volume_group + logical_volume }}"




    # vg_lv_path: "/{{ origin_path }}/{{ volume_group }}/{{ logical_volume }}"

    # physical_volume: "{{ device_path + '1' }}"  # Физический том
    # physical_volume: "{{ physical_volume + (device_path | map('regex_replace', '$', '1') | list) }}"
    
    # physical_volume: "{{ device_path | map('regex_replace', '(.*)', '\\1' + '1') | list }}"
    # logical_volume: "lv-{{ hostvars[inventory_hostname]['external_disks'][0]['disk_name'] }}"  # Логический том
    # physical_volume: "{{ device_path + '1' }}"  # Физический том
    # vg_lv_path: "/{{ origin_path }}/{{ volume_group }}/{{ logical_volume }}"
    # file_system: "{{ hostvars[inventory_hostname]['external_disks'][0]['filesystem'] }}"  # Файловая система
    # mount_point: "{{ hostvars[inventory_hostname]['external_disks'][0]['mount_point']"
  loop: "{{ device_names }}"


- name: Debug output
  debug:
    msg: "The dynamic is: {{ item }}"
  loop: "{{ mount_point }}"
    
    


# Создание раздела
# Проверка создания раздела "lsblk"
- name: Partition "{{ device_path }}" disk
  community.general.parted:
    device: "{{ item }}"
    number: 1
    flags: [ lvm ]
    label: "gpt"
    state: present
    part_end: "100%"
  when: device_names is defined
  loop: "{{ device_path }}"
  tags:
    - mount_external_disks_create_disk_partition

- name: Get current volume groups
  command: "vgs"
  register: vgs_info
  changed_when: false

- name: Check if vgs output is empty
  debug:
    msg: "{{ vgs_info.stdout }}"

- name: Create Volume Groups for each Physical Volume
  community.general.lvg:
    vg: "{{ volume_group[item] }}"  # Имя группы томов
    pvs: "{{ physical_volume[item] }}"  # Соответствующий физический том
  when: device_names is defined and vgs_info.stdout == ""
  loop: "{{ range(0, volume_group | length) | list }}"
  tags:
    - mount_external_disks_create_pv_vg


# # Создание Volume Group
# # Проверка: "vgs"
# - name: Task for PV and VG
#   community.general.lvg:
#     vg: "{{ volume_group }}"
#     pvs: "{{ physical_volume }}"
#   when: device_names is defined
#   # loop: "{{ volume_group }}"
#   tags:
#     - mount_external_disks_create_pv_vg

- name: Get current logical volumes
  command: "lvs"
  register: lvs_info
  changed_when: false


# Создание Logical Volume
# Проверка: "lvs"
- name: Logical volume - "{{ logical_volume }}" - with size
  community.general.lvol:
    vg: "{{ volume_group[item] }}"
    lv: "{{ logical_volume[item] }}"
    size: 100%FREE
  when: device_names is defined and lvs_info.stdout == ""
  # loop: "{{ logical_volume }}"
  loop: "{{ range(0, volume_group | length) | list }}"
  tags:
    - mount_external_disks_create_lv


- name: Combine volume group and logical volume into paths
  set_fact:
    vg_lv_path: "{{ vg_lv_path + ['/dev/' + volume_group[item] + '/' + logical_volume[item]] }}"
  loop: "{{ range(0, volume_group | length) | list }}"

- name: Debug output for vg_lv_path
  debug:
    msg: "vg_lv_path: {{ vg_lv_path }}"

    

# Форматирование раздела и создание файловой системы
# Проверка: "lsblk -f"
- name: Format the volume with "{{ file_system }}" fs
  community.general.filesystem:
    fstype: "{{ file_system }}"
    dev: "{{ item }}"
  when: device_names is defined
  loop: "{{ vg_lv_path }}"
  tags:
    - mount_external_disks_create_file_system


# Создание директории для монтирования жеского диска
- name: Target directory under /opt/
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  when: device_names is defined
  loop: "{{ mount_point }}"
  tags:
    - mount_external_disks_create_mount_dir



- name: Create mount points and corresponding volume paths
  set_fact:
    mount_pairs: "{{ mount_pairs + [[mount_point[item], vg_lv_path[item]]] }}"
  loop: "{{ range(0, mount_point | length) | list }}"

- name: Debug output for mount pairs
  debug:
    msg: "Mount pairs: {{ mount_pairs }}"


# # Монтирование жеского диска
# # Проверка, что жеский диск смонтирован "lsblk -f" 
# # Проверка, что жесткий диск добавлен в автозагрузку "cat /etc/fstab"
# # Проверка, что все файловые системы из "/etc/fstab" корректно монтируются: mount -a
- name: Mount the logical volumes on "{{ vg_lv_path }}"
  ansible.posix.mount:
    path: "{{ item[0] }}"  # mount_point
    src: "{{ item[1] }}"   # vg_lv_path
    fstype: "{{ file_system }}"
    state: mounted
  loop: "{{ mount_pairs }}"
  when: device_names is defined
  tags:
    - mount_external_disks_add_automount


# # Монтирование жеского диска
# # Проверка, что жеский диск смонтирован "lsblk -f" 
# # Проверка, что жесткий диск добавлен в автозагрузку "cat /etc/fstab"
# # Проверка, что все файловые системы из "/etc/fstab" корректно монтируются: mount -a
# - name: mount the lv on "{{ vg_lv_path }}"
#   ansible.posix.mount:
#     path: "{{ mount_point }}"
#     src: "{{ vg_lv_path }}"
#     fstype: "{{ file_system }}"
#     state: mounted
#   when: device_names is defined
#   tags:
#     - mount_external_disks_add_automount
