---
# Retrieve the "disk_id" and prepend "virtio-"
- name: Step 1 - Retrieve the "disk_id" and prepend "virtio-""
  set_fact:
    virtio_disk_ids: "{{ virtio_disk_ids | default([]) + ['virtio-' + item.disk_id] }}"
  loop: "{{ hostvars[inventory_hostname].external_disks | default([]) }}"


# Compare with "ansible_facts.device_links.ids
- name: Step 2 - Compare with "ansible_facts.device_links.ids"
  set_fact:
    device_names: "{{ device_names + [item.key] }}"
  loop: "{{ ansible_facts.device_links.ids | dict2items }}"
  when: item.value | intersect(virtio_disk_ids) | length > 0


# Create dynamic variables
- name: Step 3 - Create dynamic variables
  set_fact:
    device_path: "{{ device_path + [origin_path + item] }}"
    mount_point: "{{ hostvars[inventory_hostname]['external_disks'] | map(attribute='mount_point') | list }}"
  loop: "{{ device_names }}"


# Partitioning the disk with new partitions
- name: Step 4 - Partitioning the disk with new partitions "{{ device_path }}"
  community.general.parted:
    device: "{{ item }}"
    number: 1
    label: "gpt"
    state: present
    part_end: "100%"
  when: device_names is defined
  loop: "{{ device_path }}"
  tags:
    - mount_external_disks_create_disk_partition


# Formatting the partition and creating the file system
- name: Step 5 - Formatting the partition and creating the file system "{{ file_system }}"
  community.general.filesystem:
    fstype: "{{ file_system }}"
    dev: "{{ item }}1"
  when: device_names is defined
  loop: "{{ device_path }}"
  tags:
    - mount_external_disks_create_file_system


# Creating a directory for mounting the hard drive
- name: Step 6 - Creating a directory for mounting the hard drive opt/"{{ mount_point }}"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  when: device_names is defined
  loop: "{{ mount_point }}"
  tags:
    - mount_external_disks_create_mount_dir


# Retrieving UUIDs for all external disks
- name: Step 7 - Retrieving UUIDs for all external disks
  ansible.builtin.shell: "blkid -o value -s UUID {{ item }}1"
  register: disk_uuids
  loop: "{{ device_path }}"
  when: device_names is defined
  tags:
    - mount_external_disks_get_uuid


# Setting facts for UUIDs and disks
- name: Step 8 - Setting facts for UUIDs and disks
  ansible.builtin.set_fact:
    disk_uuids_map: "{{ disk_uuids.results | map(attribute='stdout') | zip(device_path, mount_point) }}"
  when: device_names is defined
  tags:
    - mount_external_disks_set_facts

- name: Debug disk UUIDs and devices
  debug:
    var: disk_uuids_map


# Mounting the hard drive at mount_point and enabling automount
- name: Step 9 - Mounting the hard drive at "{{ mount_point }}" and enabling automount
  ansible.posix.mount:
    path: "{{ item[2] }}"  # mount_point
    src: "UUID={{ item[0] }}" # UUID
    fstype: "{{ file_system }}"
    opts: "defaults,nofail,x-systemd.device-timeout=5"
    dump: 0 
    passno: 2
    state: mounted
  loop: "{{ disk_uuids_map }}"
  when: device_names is defined
  tags:
    - mount_external_disks_add_automount