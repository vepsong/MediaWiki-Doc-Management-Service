# tasks file for unmount_disk
# Инфо:

# 1. Размонтирование директории: 
# 1.1. Просмотреть path точки монтирования: lsblk -f
# 1.2. Размонтировать директорию: umount <path>
# umount /opt/vhdd-1-monitoring-system-db/

# 2. Удалить Logical Volume:
# 2.1. Просмотреть Logical Volume: lvdisplay
# 2.2. Удалить Logical Volume: lvremove <path>
# lvremove /dev/vg-db-storage/lv-vhdd-1-monitoring-system-db

# 3. Удалить Volume Group:
# 3.1. Просмотреть Volume Group: vgdisplay
# 3.2. Удалить Volume Group: vgremove <name>
# vgremove vg-db-storage

# 4. Удалить partition (и вместе с ним physical volume):
# 4.1. Просмотреть partition: fdisk -l -a или lsblk -f
# 4.2. Удалить Volume Group: fdisk <path> 
# fdisk /dev/vdb далее p (просмотр сущ. разделов) далее d (удалить раздел) далее выбрать номер раздела далее w (сохранить изменени

---

- name: Шаг 1 - Получить disk_id и добавить "virtio-"
  set_fact:
    virtio_disk_ids: "{{ virtio_disk_ids | default([]) + ['virtio-' + item.disk_id] }}"
  loop: "{{ hostvars[inventory_hostname].external_disks | default([]) }}"

- name: Шаг 2 - Сравнить с ansible_facts.device_links.ids
  set_fact:
    device_names: "{{ device_names + [item.key] }}"
  loop: "{{ ansible_facts.device_links.ids | dict2items }}"
  when: item.value | intersect(virtio_disk_ids) | length > 0

- name: Шаг 3 - Создать динамические переменные
  set_fact:
    device_path: "{{ device_path + [origin_path + item] }}"
    logical_volume: "{{ hostvars[inventory_hostname]['external_disks'] | map(attribute='disk_name') | map('regex_replace', '^', 'lv-') | list }}"
    physical_volume: "{{ physical_volume + ([origin_path + item] | map('regex_replace', '$', '1')) }}"
    volume_group: "{{ hostvars[inventory_hostname]['external_disks'] | map(attribute='disk_name') | map('regex_replace', '^', 'vg-db-storage-') | list }}"
    mount_point: "{{ hostvars[inventory_hostname]['external_disks'] | map(attribute='mount_point') | list }}"
  loop: "{{ device_names }}"


# Размонтирование жесткого диска
# Проверка, что жеский диск размонтирован "lsblk -f" 
- name: Шаг 4 - Размонтирование жесткого диска из "{{ mount_point }}"
  ansible.posix.mount:
    path: "{{ item }}"  # mount_point
    state: unmounted
  loop: "{{ mount_point }}"
  when: device_names is defined
  tags:
    - unmount_external_disks_remove_automount


# Создание Logical Volume
# Проверка: "lvs"
- name: Шаг 5 - Удаление Logical Volumes - "{{ logical_volume }}"
  community.general.lvol:
    vg: "{{ volume_group[item] }}"
    lv: "{{ logical_volume[item] }}"
    state: absent
    force: true
  when: device_names is defined
  loop: "{{ range(0, volume_group | length) | list }}"
  tags:
    - unmount_external_disks_remove_lv


# Удаление VG
# Проверка: "vgs"
- name: Шаг 6 - Удаление Volume Groups - "{{ volume_group }}"
  community.general.lvg:
    vg: "{{ item }}"
    state: absent
  when: device_names is defined
  loop: "{{ volume_group }}"
  tags:
    - unmount_external_disks_remove_vg


# Удаление раздела
# Проверка удаления раздела "lsblk -f"
- name: Шаг 7 - Удаление partitiion "{{ device_path }}" disk
  community.general.parted:
    device: "{{ item }}"
    number: 1
    state: absent
  when: device_names is defined
  loop: "{{ device_path }}"
  tags:
    - unmount_external_disks_remove_disk_partition





# # 4. Remove the partition using fdisk
# - name: Partition "{{ device_path }}" disk
#   community.general.parted:
#     device: "{{ device_path }}"
#     number: 1
#     state: absent
#   when: device_name is defined
#   tags:
#     - unmount_external_disks_remove_disk_partition

  

# ---
# - name: Cleanup LVM and partitions
#   hosts: vm-1-monitoring-system
#   become: true
#   tasks:
#     # 1. Unmount the logical volume if mounted
#     - name: Unmount the logical volume
#       ansible.posix.mount:
#         path: /opt/vhdd-1-monitoring-system-db  # Path to the mount point
#         state: unmounted

#     # 2. Remove the Logical Volume
#     - name: Remove logical volume
#       community.general.lvol:
#         vg: vg-db-storage
#         lv: lv-vhdd-1-monitoring-system-db
#         state: absent
#         force: true

#     # 3. Remove the Volume Group
#     - name: Remove volume group
#       community.general.lvg:
#         vg: vg-db-storage
#         state: absent

#     # 4. Remove the partition using fdisk
#     - name: Partition /dev/vdb disk
#       community.general.parted:
#         device: /dev/vdb
#         number: 1
#         state: absent