---
# tasks file for db_postgresql

# Обновление пакетного репозитория 
- name: Step 1 - Update list of packages
  apt:
    update_cache: yes
  become: yes
  tags:
    - db_postgresql_apt_update


# Установка пакетов
- name: Step 2 - Packet installing
  apt:
    name: "{{ item }}" 
    state: present
  loop:
    - "{{ packages_to_install }}"
  tags:
    - db_postgresql_install_packages 

# Запуск сервиса и добавление в автозапуск
- name: Step 3 - Start and enable services
  service: 
    name=postgresql
    state=started 
    enabled=yes
  tags:
    - db_postgresql_start_enable_service

# Добавление секретных переменных
- name: Step 4 - Include secret variables
  include_vars: secrets.yml

# Создание динамических переменных
- name: Step 5 - Create dynamic vars
  set_fact:
    mount_point: "{{ hostvars[inventory_hostname]['external_disks'] | map(attribute='mount_point') | list }}"

# Создание группы безопасности
- name: Step 6 - Create a group for PostgreSQL access
  ansible.builtin.group:
    name: dbadmin
    state: present

# Добавление пользователей в группу безопасности
- name: Step 7 - Add multiple users to dbadmin group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: dbadmin
    append: yes
  loop:
    - postgres
    - sudo
    - "{{ postgres_wikiuser_user_vars.db_user }}"

# Смена владельцев директории
- name: Step 8 - Change group ownership for PostgreSQL directories
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    group: dbadmin
    state: directory
  # loop: "{{ mount_point }}"
  loop: 
  - "{{ mount_point }}"  # Указываем на директорию PostgreSQL
  - "/opt"  # Указываем на родительскую директорию

# Установка разрешений для директории
- name: Step 9 - Set permissions for PostgreSQL directories
  ansible.builtin.file:
    path: "{{ item }}"
    mode: '0770'  # Права для владельца и группы: чтение, запись, выполнение
  # loop: "{{ mount_point }}"
  loop: 
    - "{{ mount_point }}"  # Указываем на директорию PostgreSQL
    - "/opt"  # Указываем на родительскую директорию



# Создание пользователя wikiuser для PRIMARY PostgreSQL db
- name: Step 10 - create user - wikiuser - in PRIMARY PostgreSQL db
  become: true
  become_user: postgres
  community.postgresql.postgresql_user:
    name: "{{ postgres_wikiuser_user_vars.db_user }}"
    password: "{{ postgres_wikiuser_user_vars.db_user_password }}"
    role_attr_flags: "{{ postgres_wikiuser_user_vars.attr | join(',') }}"
    state: present
  tags:
    - db_postgresql_create_primary_postgres_wikiuser_user
  when: db_hosts.primary in inventory_hostname
  notify: reload_postgresql


# Создание пользователя wikiuser для PRIMARY PostgreSQL db
- name: Step 11 - create user - syncuser - in PRIMARY PostgreSQL db
  become: true
  become_user: postgres
  community.postgresql.postgresql_user:
    name: "{{ postgres_replication_user_vars.db_user }}"
    password: "{{ postgres_replication_user_vars.db_user_password }}"
    role_attr_flags: "{{ postgres_replication_user_vars.attr | join(',') }}"
    state: present
  tags:
    - db_postgresql_create_primary_postgres_syncuser  _user
  when: db_hosts.primary in inventory_hostname
  notify: reload_postgresql


# Проверка существования БД (если ее нет, то создание)
- name: Step 12 - Ensure the PostgreSQL database is present
  become: true
  become_user: postgres
  community.postgresql.postgresql_db:
    name: "{{ postgres_vars.db_name }}"
    owner: "{{ postgres_wikiuser_user_vars.db_user }}"
    state: present
  when: db_hosts.primary in inventory_hostname



