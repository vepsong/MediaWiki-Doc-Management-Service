---
# tasks file for db_postgresql

# Обновление пакетного репозитория 
- name: Step 1 - Update list of packages
  apt:
    update_cache: yes
  become: yes
  tags:
    - db_postgresql_apt_update


# Установка пакетов
- name: Step 2 - Packet installing
  apt:
    name: "{{ item }}" 
    state: present
  loop:
    - "{{ packages_to_install }}"
  tags:
    - db_postgresql_install_packages 

# Запуск сервиса и добавление в автозапуск
- name: Step 3 - Start and enable services
  service: 
    name=postgresql
    state=started 
    enabled=yes
  tags:
    - db_postgresql_start_enable_service

# Добавление секретных переменных
- name: Step 4 - Include secret variables
  include_vars: secrets.yml
  tags:
    - db_postgresql_add_secret_variables

# Создание динамических переменных
- name: Step 5 - Create dynamic variables
  set_fact:
    mount_point: "{{ hostvars[inventory_hostname]['external_disks'] | map(attribute='mount_point') | list }}"
  tags:
    - db_postgresql_create_dynamic_variables

# Создание группы безопасности
- name: Step 6 - Create a group for PostgreSQL access
  ansible.builtin.group:
    name: dbadmin
    state: present
  tags:
    - db_postgresql_create_Postgresql_group_access

# Добавление пользователей в группу безопасности
- name: Step 7 - Add multiple users to dbadmin group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: dbadmin
    append: yes
  loop:
    - postgres
    - sudo
    - "{{ postgres_wikiuser_user_vars.db_user }}"
  tags:
    - db_postgresql_add_users_dbadmin_group

# Смена владельцев директории
- name: Step 8 - Change group ownership for PostgreSQL directories
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    group: dbadmin
    state: directory
  # loop: "{{ mount_point }}"
  loop: 
  - "{{ mount_point }}"  # Указываем на директорию PostgreSQL
  - "/opt"  # Указываем на родительскую директорию
  tags:
    - db_postgresql_change_postgresql_path_ownership


# Установка разрешений для директории
- name: Step 9 - Set permissions for PostgreSQL directories
  ansible.builtin.file:
    path: "{{ item }}"
    mode: '0770'  # Права для владельца и группы: чтение, запись, выполнение
  # loop: "{{ mount_point }}"
  loop: 
    - "{{ mount_point }}"  # Указываем на директорию PostgreSQL
    - "/opt"  # Указываем на родительскую директорию
  tags:
    - db_postgresql_set_postgresql_permissions


# Создание пользователя wikiuser для PRIMARY PostgreSQL db
- name: Step 10 - create user - wikiuser - in PRIMARY PostgreSQL db
  become: true
  become_user: postgres
  community.postgresql.postgresql_user:
    name: "{{ postgres_wikiuser_user_vars.db_user }}"
    password: "{{ postgres_wikiuser_user_vars.db_user_password }}"
    role_attr_flags: "{{ postgres_wikiuser_user_vars.attr | join(',') }}"
    state: present
  tags:
    - db_postgresql_create_primary_postgres_wikiuser_user
  when: db_hosts.primary in inventory_hostname
  notify: reload_postgresql
  tags:
    - db_postgresql_create_user_wikiuser

# Создание пользователя syncuser для PRIMARY PostgreSQL db
- name: Step 11 - create user - syncuser - in PRIMARY PostgreSQL db
  become: true
  become_user: postgres
  community.postgresql.postgresql_user:
    name: "{{ postgres_replication_user_vars.db_user }}"
    password: "{{ postgres_replication_user_vars.db_user_password }}"
    role_attr_flags: "{{ postgres_replication_user_vars.attr | join(',') }}"
    state: present
  tags:
    - db_postgresql_create_primary_postgres_syncuser  _user
  when: db_hosts.primary in inventory_hostname
  notify: reload_postgresql
  tags:
    - db_postgresql_create_user_syncuser


# Проверка существования БД (если ее нет, то создание)
- name: Step 12 - Ensure the PostgreSQL database is present
  become: true
  become_user: postgres
  community.postgresql.postgresql_db:
    name: "{{ postgres_vars.db_name }}"
    owner: "{{ postgres_wikiuser_user_vars.db_user }}"
    state: present
  when: db_hosts.primary in inventory_hostname
  tags:
    - db_postgresql_ensure_postgresql_db_is_presents


# Добавление разрешений в pg_hba.conf на подключение к Primary Postgresql
- name: Step 13 - Add entries to pg_hba.conf for Primary PostgreSQL
  become: true
  become_user: postgres
  blockinfile:
    path: /etc/postgresql/14/main/pg_hba.conf
    block: |
      host my_wiki       wikiuser       77.137.79.100/32           scram-sha-256
      host my_wiki       wikiuser       {{ hostvars['vm-1-monitoring-system'].ansible_host }}/32          scram-sha-256
      host my_wiki       wikiuser       192.168.10.11/32           scram-sha-256    
      host my_wiki       wikiuser       {{ hostvars['vm-3-mediawiki-server-1'].ansible_host }}/32          scram-sha-256    
      host my_wiki       wikiuser       192.168.10.13/32           scram-sha-256
      host my_wiki       wikiuser       {{ hostvars['vm-4-mediawiki-server-2'].ansible_host }}/32          scram-sha-256    
      host my_wiki       wikiuser       192.168.10.14/32           scram-sha-256
      host my_wiki       wikiuser       {{ hostvars['vm-5-haproxy-proxy-server'].ansible_host }}/32          scram-sha-256    
      host my_wiki       wikiuser       192.168.10.15/32           scram-sha-256
      host my_wiki       wikiuser       {{ hostvars['vm-6-primary-db'].ansible_host }}/32          scram-sha-256    
      host my_wiki       wikiuser       192.168.10.16/32           scram-sha-256
      host my_wiki       wikiuser       {{ hostvars['vm-7-standby-db'].ansible_host }}/32          scram-sha-256
      host my_wiki       wikiuser       192.168.10.17/32           scram-sha-256
      host replication   syncuser       77.137.79.100/32           scram-sha-256
      host replication   syncuser       {{ hostvars['vm-6-primary-db'].ansible_host }}/32          scram-sha-256    
      host replication   syncuser       192.168.10.16/32           scram-sha-256
      host replication   syncuser       {{ hostvars['vm-7-standby-db'].ansible_host }}/32          scram-sha-256
      host replication   syncuser       192.168.10.17/32           scram-sha-256

    marker: "# {mark} Ansible managed block for PostgreSQL"
  notify: reload_postgresql
  when: db_hosts.primary in inventory_hostname
  tags:
    - db_postgresql_add_ip_pg_hba_conf

# Настройка  wal_level в /etc/postgresql/14/main/postgresql.conf в Primary Postgresql
- name: Step 14 - Ensure listen_addresses is set to '*' in postgresql.conf in Primary Postgresql
  become: true
  become_user: postgres
  replace:
    path: /etc/postgresql/14/main/postgresql.conf
    regexp: '^#?\s*listen_addresses\s*=\s*.*'
    replace: "listen_addresses = '*'"
  notify: reload_postgresql
  when: db_hosts.primary in inventory_hostname
  tags:
    - db_postgresql_add_listen_addresses_postgresql_conf

# Настройка  wal_level в /etc/postgresql/14/main/postgresql.conf в Primary Postgresql
- name: Step 15 - Ensure wal_level is set to replica in postgresql.conf in Primary Postgresql
  become: true
  become_user: postgres
  replace:
    path: /etc/postgresql/14/main/postgresql.conf
    regexp: '^#?\s*wal_level\s*=\s*\w+'
    replace: 'wal_level = replica'
  notify: reload_postgresql
  when: db_hosts.primary in inventory_hostname
  tags:
    - db_postgresql_add_wal_level_postgresql_conf

# Настройка  wal_level в /etc/postgresql/14/main/postgresql.conf в Standby Postgresql
- name: Step 16 - Ensure hot_standby is set to 'on' in postgresql.conf in Standby Postgresql
  become: true
  become_user: postgres
  replace:
    path: /etc/postgresql/14/main/postgresql.conf
    regexp: '^#?\s*hot_standby\s*=\s*.*'
    replace: 'hot_standby = on'
  notify: reload_postgresql
  when: db_hosts.standby in inventory_hostname
  tags:
    - db_postgresql_add_hot_standby_on_postgresql_conf

# Настройка  data_directory в /etc/postgresql/14/main/postgresql.conf в Standby Postgresql
- name: Step 17 - Ensure data_directory is mount point in postgresql.conf in Standby Postgresql
  become: true
  become_user: postgres
  replace:
    path: /etc/postgresql/14/main/postgresql.conf
    regexp: '^#?\s*data_directory\s*=\s*.*'
    replace: "data_directory = '{{ hostvars['vm-7-standby-db'].external_disks[0].mount_point }}/postgresql/14/main'"
  notify: reload_postgresql
  when: db_hosts.standby in inventory_hostname
  tags:
    - db_postgresql_add_data_directory_on_postgresql_conf

# Настройка копирования директории на внешний жесткий диск
- name: Step 18 - Copy directory with preserving permissions (like cp -a) on remote host
  become: true
  become_user: root
  command: "cp -a /var/lib/postgresql {{ hostvars['vm-7-standby-db'].external_disks[0].mount_point }}"
  when: db_hosts.standby in inventory_hostname
  tags:
    - db_postgresql_copy_path

# Удаление всех файлов из скопированной директории
- name: Step 19 - Remove all contents of the directory
  become: true
  become_user: root
  # command: "rm -rf {{ hostvars['vm-7-standby-db'].external_disks[0].mount_point }}/postgresql/14/main/*"
  shell: "rm -rf {{ hostvars['vm-7-standby-db'].external_disks[0].mount_point }}/postgresql/14/main/*"
  when: db_hosts.standby in inventory_hostname
  tags:
    - cleanup_directory

