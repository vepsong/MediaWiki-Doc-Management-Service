---
# tasks file for db_postgresql

# =======================
# Block with common tasks
# =======================

# Updating the apt repository
- name: Step 1 - Update list of packages
  apt:
    update_cache: yes
  become: true
  tags:
    - db_postgresql_apt_update

# Installing apt packages
- name: Step 2 - Apt packages installing
  apt:
    name: "{{ item }}" 
    state: present
  loop:
    - "{{ apt_packages_to_install }}"
  tags:
    - db_postgresql_install_packages 

# Installing the pip3 packages
- name: Step 3 - Pip3 packages installing
  become: true
  ansible.builtin.pip:
    name: "{{ item }}" 
    state: latest
  loop:
    - "{{ pip3_packages_to_install }}"
  tags:
    - db_postgresql_install_pip3_packages_python_dotenv

# Starting and enabling the postgresql service
- name: Step 4 - Starting and enabling the postgresql service
  service: 
    name=postgresql
    state=started 
    enabled=yes
  tags:
    - db_postgresql_start_enable_service

# Adding secret variables
- name: Step 5 - Adding secret variables
  include_vars: "{{ playbook_dir }}/common_files/ansible_secrets.yaml"
  tags:
    - db_postgresql_adding_secret_variables

# Creating dynamic variables
- name: Step 6 - Creating dynamic variables
  set_fact:
    mount_point: "{{ hostvars[inventory_hostname]['external_disks'] | map(attribute='mount_point') | list }}"
  tags:
    - db_postgresql_creating_dynamic_variables

# Creating a security group
- name: Step 7 - Creating a "dbadmin" security group
  ansible.builtin.group:
    name: dbadmin
    state: present
  tags:
    - db_postgresql_create_Postgresql_group_access

# Adding multiple users to the security group
- name: Step 8 - Adding multiple users to "dbadmin" group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: dbadmin
    append: yes
  loop:
    - postgres
    - sudo
    - "{{ mediawiki_postgresql_vars.db_user }}"
    - "{{ zabbix_postgresql_vars.db_user }}"
  tags:
    - db_postgresql_add_users_dbadmin_group

# Changing group ownership for PostgreSQL directories
- name: Step 9 - Changing group ownership for PostgreSQL directories
  become: true
  become_user: root
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    group: dbadmin
    state: directory
    recurse: true
  loop: 
  - "{{ mount_point }}"  # Specifying the PostgreSQL directory
  - "/opt"  # Specifying the parent directory
  tags:
    - db_postgresql_change_postgresql_path_ownership


# Setting permissions for the directory
- name: Step 10 - Setting permissions for PostgreSQL directories
  become: true
  become_user: root
  ansible.builtin.file:
    path: "{{ item }}"
    mode: '0770'  # Permissions for owner and group: read, write, execute
    recurse: true
  # loop: "{{ mount_point }}"
  loop: 
    - "{{ mount_point }}"  # Specifying the PostgreSQL directory
    - "/opt"  # Specifying the parent directory
  tags:
    - db_postgresql_set_postgresql_permissions


# Stopping the PostgreSQL service
- name: Step 11 - Stopping the PostgreSQL service
  become: true
  become_user: root
  systemd:
    name: postgresql
    state: stopped
  tags:
    - db_postgresql_stopping_postgresql_service


# Creating a backup archive of the main PostgreSQL directory
- name: Step 12 - Creating a backup archive of the main PostgreSQL directory
  become: true
  become_user: root
  command: >
    tar -czvf /tmp/postgres_initial_main_backup_{{ ansible_date_time.iso8601_basic }}.tar.gz
    -C /var/lib/postgresql/14/ main
  when: (ansible_facts.filesystem_info['/var/lib/postgresql/14/main'] is defined)
  tags:
    - db_postgresql_create_backup_archive


# Checking for the presence of a mount point
- name: Step 13 - Checking for the presence of a mount point
  become: true
  become_user: root
  command: ls -a {{ hostvars[inventory_hostname].external_disks[0].mount_point }}
  tags:
    - db_postgresql_checking_mount_point_presence


# Copying (with -a flag) the current main database directory to the mount point
- name: Step 14 - Copying (with -a flag) the current main database directory to the mount point
  become: true
  become_user: root
  command: >
    cp -a /var/lib/postgresql/ {{ hostvars[inventory_hostname].external_disks[0].mount_point }}
  # when: inventory_hostname in ['vm-1-zabbix-server', 'vm-6-postgresql-db-1']
  tags:
    - db_postgresql_copying_current_main_db_dir_to_mount_point

# Deleting the old main Postresql directory
- name: Step 15 - Deleting the old main Postresql directory
  become: true
  become_user: root
  command: rm -rf /var/lib/postgresql/14/main
  tags:
    - db_postgresql_deleting_the_old_main_postgresql_dir


# Configuring the data_directory in /etc/postgresql/14/main/postgresql.conf
- name: Step 16 - Configuring the data_directory in /etc/postgresql/14/main/postgresql.conf
  become: true
  become_user: postgres
  replace:
    path: /etc/postgresql/14/main/postgresql.conf
    regexp: '^#?\s*data_directory\s*=\s*.*'
    replace: "data_directory = '{{ hostvars[inventory_hostname].external_disks[0].mount_point }}/postgresql/14/main'"
  notify: restart_postgresql
  tags:
    - db_postgresql_configuring_data_dir_postgresql_conf


# Configuring the listen_addresses in /etc/postgresql/14/main/postgresql.conf
- name: Step 17 - Configuring the listen_addresses in /etc/postgresql/14/main/postgresql.conf
  become: true
  become_user: postgres
  replace:
    path: /etc/postgresql/14/main/postgresql.conf
    regexp: '^#?\s*listen_addresses\s*=\s*.*'
    replace: "listen_addresses = '*'"
  notify: restart_postgresql
  tags:
    - db_postgresql_listen_addresses_postgresql_conf



# Adding permissions to pg_hba.conf for connecting to the PostgreSQL
- name: Step 18 - Adding permissions to pg_hba.conf for connecting to the PostgreSQL
  become: true
  become_user: postgres
  blockinfile:
    path: /etc/postgresql/14/main/pg_hba.conf
    block: |

      host my_wiki       wikiuser       77.137.79.100/32                                                scram-sha-256
      host my_wiki       wikiuser       212.179.174.196/32                                              scram-sha-256
      host my_wiki       wikiuser       5.29.11.237/32                                                  scram-sha-256
                                        
                                        # Internal IP address
      host my_wiki       wikiuser       {{ hostvars['vm-1-zabbix-server'].ansible_host }}/32        scram-sha-256
      host my_wiki       wikiuser       192.168.10.11/32                                                scram-sha-256    
      host my_wiki       wikiuser       {{ hostvars['vm-3-mediawiki-server-1'].ansible_host }}/32       scram-sha-256    
      host my_wiki       wikiuser       192.168.10.13/32                                                scram-sha-256
      host my_wiki       wikiuser       {{ hostvars['vm-4-mediawiki-server-2'].ansible_host }}/32       scram-sha-256    
      host my_wiki       wikiuser       192.168.10.14/32                                                scram-sha-256
      host my_wiki       wikiuser       {{ hostvars['vm-5-haproxy-proxy-server'].ansible_host }}/32     scram-sha-256    
      host my_wiki       wikiuser       192.168.10.15/32                                                scram-sha-256
      host my_wiki       wikiuser       {{ hostvars['vm-6-postgresql-db-1'].ansible_host }}/32               scram-sha-256    
      host my_wiki       wikiuser       192.168.10.16/32                                                scram-sha-256
      host my_wiki       wikiuser       {{ hostvars['vm-7-postgresql-db-2'].ansible_host }}/32               scram-sha-256
      host my_wiki       wikiuser       192.168.10.17/32                                                scram-sha-256

                                        # Nat IP address
      host replication   syncuser       77.137.79.100/32                                                scram-sha-256
      host replication   syncuser       212.179.174.196/32                                              scram-sha-256     
      host replication   syncuser       5.29.11.237/32                                                  scram-sha-256
      
                                        # Internal IP address
      host replication   syncuser       {{ hostvars['vm-6-postgresql-db-1'].ansible_host }}/32               scram-sha-256    
      host replication   syncuser       192.168.10.16/32                                                scram-sha-256
      host replication   syncuser       {{ hostvars['vm-7-postgresql-db-2'].ansible_host }}/32               scram-sha-256
      host replication   syncuser       192.168.10.17/32                                                scram-sha-256

    marker: "# {mark} Ansible managed block for PostgreSQL"
  notify: restart_postgresql
  when: inventory_hostname in ['vm-6-postgresql-db-1', 'vm-7-postgresql-db-2']
  tags:
    - db_postgresql_configuring_connect_permissions_dir_pg_hba_conf


# Restarting the PostgreSQL service
- name: Step 19 - Restarting the PostgreSQL service
  become: true
  become_user: root
  systemd:
    name: postgresql
    state: restarted
  tags:
    - db_postgresql_restart_postgresql_service


# ======================================================
# Block with Common PostgreSQL tasks for creating a dump
# ======================================================


# Creating the /scripts directory with '0755' permissions, where scripts for the dump will be stored
# Owner: rwx (read, write, and execute)
# Group: r-x (read and execute)
# Others: r-x (read and execute)
- name: Step 20 - Creating the /scripts directory with '0755' permissions
  become: true
  become_user: root
  ansible.builtin.file:
    path: /scripts 
    state: directory
    mode: '0755'
  tags:
    - db_postgresql_creating_scripts_directory

# Creating the .env file in /scripts directory with '0740' permissions
# Owner: rwx (read, write, and execute)
# Group: r-- (read only)
# Others: --- (no access)
- name: Step 21 - Creating the .env file in /scripts directory with '0740' permissions
  become: true
  become_user: root
  ansible.builtin.file:
    path: "/scripts/.env"
    state: touch
    group: dbadmin
    mode: '0740'
  tags:
    - db_postgresql_creating_env_file

# Copying the pgdump_standby_postgresql.py script to ~/scripts with '0755' permissions
# Owner: rwx (read, write, and execute)
# Group: r-x (read and execute)
# Others: r-x (read and execute)
- name: Step 22 - Copying the pgdump_standby_postgresql.py script to ~/scripts with '0755' permissions
  become: true
  become_user: root
  copy:
    src: "{{ playbook_dir }}/common_files/postgresql_standby/pgdump_standby_postgresql.py"
    dest: /scripts/
    mode: '0755'
  when: inventory_hostname in ['vm-6-postgresql-db-1', 'vm-7-postgresql-db-2']
  tags:
    - db_postgresql_copy_pgdump_standby_posgresql_py


# Filling the .env file with data
- name: Step 23 - Filling the .env file with data
  become: true
  become_user: root
  blockinfile:
    path: /scripts/.env
    block: |
      BACKUPS_DIR="{{ mediawiki_postgresql_vars.db_backups_dir }}"
      DATABASE_USER={{ mediawiki_postgresql_vars.db_user }}
      DATABASE_PASSWORD={{ mediawiki_postgresql_vars.db_user_password }}
      DATABASE_NAME={{ mediawiki_postgresql_vars.db_name }}
      DATABASE_PORT={{ mediawiki_postgresql_vars.db_port }}

      REMOTE_HOST={{ mediawiki_server_1.ip_addr }}
      REMOTE_USER={{ mediawiki_server_1.user }}
      PRIVATE_KEY_PATH={{ mediawiki_server_2.private_key_ssh_path }}

    marker: "# {mark} Ansible managed block for .env"
  when: inventory_hostname in ['vm-6-postgresql-db-1', 'vm-7-postgresql-db-2']
  tags:
    - db_postgresql_filling_env_data


# Copying the private SSH key to ~/.ssh with '600' permissions
# Owner: rw- (read, write)
- name: Step 24 - Copying Private ssh-key to ~/.ssh with '600' permissions
  become: true
  become_user: root
  copy:
    src: "{{ playbook_dir }}/common_files/id_ed25519"
    dest: ~/.ssh
    mode: '600'    
  when: inventory_hostname in ['vm-6-postgresql-db-1', 'vm-7-postgresql-db-2']
  tags:
    - db_postgresql_copying_private_ssh_key


# Copying the logrotate_pgdump_standby_posgresql file to /etc/logrotate.d/
# Command for forcing logrotate to run: logrotate -f /etc/logrotate.conf
- name: Step 25 - Copying the logrotate_pgdump_standby_posgresql file to /etc/logrotate.d/
  become: true
  become_user: root
  copy:
    src: "{{ playbook_dir }}/common_files/postgresql_standby/logrotate_pgdump_standby_posgresql"
    dest: /etc/logrotate.d/
  when: inventory_hostname in ['vm-6-postgresql-db-1', 'vm-7-postgresql-db-2']
  tags:
    - db_postgresql_logrotate_pgdump_standby_posgresql
    
# Starting and enabling the logrotate service
- name: Step 26 - Starting and enabling the logrotate service
  service:
    name=logrotate
    state=started 
    enabled=yes
  when: inventory_hostname in ['vm-6-postgresql-db-1', 'vm-7-postgresql-db-2']
  tags:
    - db_postgresql_start_enable_logrotate_service