---
# tasks file for db_postgresql

# =======================
# Block with common tasks
# =======================

# Updating the apt repository
- name: Step 1 - Update list of packages
  apt:
    update_cache: yes
  become: true
  tags:
    - db_postgresql_apt_update

# Installing packages
- name: Step 2 - Packet installing
  apt:
    name: "{{ item }}" 
    state: present
  loop:
    - "{{ packages_to_install }}"
  tags:
    - db_postgresql_install_packages 

# Installing the pip3 package python-dotenv
- name: Step 3 - Install python-dotenv using pip3
  become: true
  ansible.builtin.pip:
    name: python-dotenv
    executable: pip3
  when: db_hosts.standby in inventory_hostname or db_hosts.zabbix_server in inventory_hostname
  tags:
    - db_postgresql_install_pip3_packages_python_dotenv

# Installing the pip3 package patroni
- name: Step 4 - Install patroni using pip3
  become: true
  ansible.builtin.pip:
    name: python-dotenv
    executable: pip3
  when: db_hosts.primary in inventory_hostname or db_hosts.standby in inventory_hostname
  tags:
    - db_postgresql_install_pip3_packages_python_patroni

# Starting the postgresql service and adding it to startup
- name: Step 5 - Start and enable services
  service: 
    name=postgresql
    state=started 
    enabled=yes
  tags:
    - db_postgresql_start_enable_service

# Adding secret variables
- name: Step 6 - Include secret variables
  include_vars: secrets.yml
  tags:
    - db_postgresql_add_secret_variables

# Creating dynamic variables
- name: Step 7 - Create dynamic variables
  set_fact:
    mount_point: "{{ hostvars[inventory_hostname]['external_disks'] | map(attribute='mount_point') | list }}"
  tags:
    - db_postgresql_create_dynamic_variables

# Creating a security group
- name: Step 8 - Create a group for PostgreSQL access
  ansible.builtin.group:
    name: dbadmin
    state: present
  tags:
    - db_postgresql_create_Postgresql_group_access

# Adding users to the security group
- name: Step 9 - Add multiple users to dbadmin group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: dbadmin
    append: yes
  loop:
    - postgres
    - sudo
    - "{{ postgres_wikiuser_user_vars.db_user }}"
    - "{{ postgres_zabbix_server_user_vars.db_user }}"
  tags:
    - db_postgresql_add_users_dbadmin_group

# Changing directory owners
- name: Step 10 - Change group ownership for PostgreSQL directories
  become: true
  become_user: root
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    group: dbadmin
    state: directory
    recurse: true
  loop: 
  - "{{ mount_point }}"  # Specifying the PostgreSQL directory
  - "/opt"  # Specifying the parent directory
  tags:
    - db_postgresql_change_postgresql_path_ownership


# Setting permissions for the directory
- name: Step 11 - Set permissions for PostgreSQL directories
  become: true
  become_user: root
  ansible.builtin.file:
    path: "{{ item }}"
    mode: '0770'  # Permissions for owner and group: read, write, execute
    recurse: true
  # loop: "{{ mount_point }}"
  loop: 
    - "{{ mount_point }}"  # Specifying the PostgreSQL directory
    - "/opt"  # Specifying the parent directory
  tags:
    - db_postgresql_set_postgresql_permissions






